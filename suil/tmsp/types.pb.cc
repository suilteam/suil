// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BlockSizeParams_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EvidenceParams_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KVPair_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartSetHeader_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProofOp_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PubKey_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestCheckTx_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestCommit_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestDeliverTx_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestEcho_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestEndBlock_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestFlush_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuery_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetOption_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseCommit_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseEcho_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseException_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseFlush_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSetOption_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ValidatorParams_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Validator_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BlockID_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LastCommitInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Proof_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseBeginBlock_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseCheckTx_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseDeliverTx_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseQuery_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ValidatorUpdate_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VoteInfo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Evidence_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ResponseInitChain_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ConsensusParams_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Header_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RequestBeginBlock_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RequestInitChain_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ResponseEndBlock_types_2eproto;
namespace suil {
namespace tmsp {
namespace types {
class ProofOpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProofOp> _instance;
} _ProofOp_default_instance_;
class ProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Proof> _instance;
} _Proof_default_instance_;
class KVPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KVPair> _instance;
} _KVPair_default_instance_;
class KI64PairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KI64Pair> _instance;
} _KI64Pair_default_instance_;
class TimestampDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Timestamp> _instance;
} _Timestamp_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request> _instance;
  const ::suil::tmsp::types::RequestEcho* echo_;
  const ::suil::tmsp::types::RequestFlush* flush_;
  const ::suil::tmsp::types::RequestInfo* info_;
  const ::suil::tmsp::types::RequestSetOption* set_option_;
  const ::suil::tmsp::types::RequestInitChain* init_chain_;
  const ::suil::tmsp::types::RequestQuery* query_;
  const ::suil::tmsp::types::RequestBeginBlock* begin_block_;
  const ::suil::tmsp::types::RequestCheckTx* check_tx_;
  const ::suil::tmsp::types::RequestDeliverTx* deliver_tx_;
  const ::suil::tmsp::types::RequestEndBlock* end_block_;
  const ::suil::tmsp::types::RequestCommit* commit_;
} _Request_default_instance_;
class RequestEchoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestEcho> _instance;
} _RequestEcho_default_instance_;
class RequestFlushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestFlush> _instance;
} _RequestFlush_default_instance_;
class RequestInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInfo> _instance;
} _RequestInfo_default_instance_;
class RequestSetOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSetOption> _instance;
} _RequestSetOption_default_instance_;
class RequestInitChainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestInitChain> _instance;
} _RequestInitChain_default_instance_;
class RequestQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuery> _instance;
} _RequestQuery_default_instance_;
class RequestBeginBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestBeginBlock> _instance;
} _RequestBeginBlock_default_instance_;
class RequestCheckTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCheckTx> _instance;
} _RequestCheckTx_default_instance_;
class RequestDeliverTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestDeliverTx> _instance;
} _RequestDeliverTx_default_instance_;
class RequestEndBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestEndBlock> _instance;
} _RequestEndBlock_default_instance_;
class RequestCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCommit> _instance;
} _RequestCommit_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response> _instance;
  const ::suil::tmsp::types::ResponseException* exception_;
  const ::suil::tmsp::types::ResponseEcho* echo_;
  const ::suil::tmsp::types::ResponseFlush* flush_;
  const ::suil::tmsp::types::ResponseInfo* info_;
  const ::suil::tmsp::types::ResponseSetOption* set_option_;
  const ::suil::tmsp::types::ResponseInitChain* init_chain_;
  const ::suil::tmsp::types::ResponseQuery* query_;
  const ::suil::tmsp::types::ResponseBeginBlock* begin_block_;
  const ::suil::tmsp::types::ResponseCheckTx* check_tx_;
  const ::suil::tmsp::types::ResponseDeliverTx* deliver_tx_;
  const ::suil::tmsp::types::ResponseEndBlock* end_block_;
  const ::suil::tmsp::types::ResponseCommit* commit_;
} _Response_default_instance_;
class ResponseExceptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseException> _instance;
} _ResponseException_default_instance_;
class ResponseEchoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseEcho> _instance;
} _ResponseEcho_default_instance_;
class ResponseFlushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseFlush> _instance;
} _ResponseFlush_default_instance_;
class ResponseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseInfo> _instance;
} _ResponseInfo_default_instance_;
class ResponseSetOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSetOption> _instance;
} _ResponseSetOption_default_instance_;
class ResponseInitChainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseInitChain> _instance;
} _ResponseInitChain_default_instance_;
class ResponseQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery> _instance;
} _ResponseQuery_default_instance_;
class ResponseBeginBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseBeginBlock> _instance;
} _ResponseBeginBlock_default_instance_;
class ResponseCheckTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCheckTx> _instance;
} _ResponseCheckTx_default_instance_;
class ResponseDeliverTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseDeliverTx> _instance;
} _ResponseDeliverTx_default_instance_;
class ResponseEndBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseEndBlock> _instance;
} _ResponseEndBlock_default_instance_;
class ResponseCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCommit> _instance;
} _ResponseCommit_default_instance_;
class ConsensusParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConsensusParams> _instance;
} _ConsensusParams_default_instance_;
class BlockSizeParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockSizeParams> _instance;
} _BlockSizeParams_default_instance_;
class EvidenceParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvidenceParams> _instance;
} _EvidenceParams_default_instance_;
class ValidatorParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidatorParams> _instance;
} _ValidatorParams_default_instance_;
class LastCommitInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LastCommitInfo> _instance;
} _LastCommitInfo_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class BlockIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockID> _instance;
} _BlockID_default_instance_;
class PartSetHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartSetHeader> _instance;
} _PartSetHeader_default_instance_;
class ValidatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Validator> _instance;
} _Validator_default_instance_;
class ValidatorUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ValidatorUpdate> _instance;
} _ValidatorUpdate_default_instance_;
class VoteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteInfo> _instance;
} _VoteInfo_default_instance_;
class PubKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PubKey> _instance;
} _PubKey_default_instance_;
class EvidenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Evidence> _instance;
} _Evidence_default_instance_;
}  // namespace types
}  // namespace tmsp
}  // namespace suil
static void InitDefaultsProofOp_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ProofOp_default_instance_;
    new (ptr) ::suil::tmsp::types::ProofOp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ProofOp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProofOp_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProofOp_types_2eproto}, {}};

static void InitDefaultsProof_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Proof_default_instance_;
    new (ptr) ::suil::tmsp::types::Proof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Proof::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Proof_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProof_types_2eproto}, {
      &scc_info_ProofOp_types_2eproto.base,}};

static void InitDefaultsKVPair_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_KVPair_default_instance_;
    new (ptr) ::suil::tmsp::types::KVPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::KVPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KVPair_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKVPair_types_2eproto}, {}};

static void InitDefaultsKI64Pair_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_KI64Pair_default_instance_;
    new (ptr) ::suil::tmsp::types::KI64Pair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::KI64Pair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KI64Pair_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKI64Pair_types_2eproto}, {}};

static void InitDefaultsTimestamp_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Timestamp_default_instance_;
    new (ptr) ::suil::tmsp::types::Timestamp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Timestamp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTimestamp_types_2eproto}, {}};

static void InitDefaultsRequest_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Request_default_instance_;
    new (ptr) ::suil::tmsp::types::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_Request_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsRequest_types_2eproto}, {
      &scc_info_RequestEcho_types_2eproto.base,
      &scc_info_RequestFlush_types_2eproto.base,
      &scc_info_RequestInfo_types_2eproto.base,
      &scc_info_RequestSetOption_types_2eproto.base,
      &scc_info_RequestInitChain_types_2eproto.base,
      &scc_info_RequestQuery_types_2eproto.base,
      &scc_info_RequestBeginBlock_types_2eproto.base,
      &scc_info_RequestCheckTx_types_2eproto.base,
      &scc_info_RequestDeliverTx_types_2eproto.base,
      &scc_info_RequestEndBlock_types_2eproto.base,
      &scc_info_RequestCommit_types_2eproto.base,}};

static void InitDefaultsRequestEcho_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestEcho_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestEcho();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestEcho::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestEcho_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestEcho_types_2eproto}, {}};

static void InitDefaultsRequestFlush_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestFlush_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestFlush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestFlush::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestFlush_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestFlush_types_2eproto}, {}};

static void InitDefaultsRequestInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestInfo_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestInfo_types_2eproto}, {}};

static void InitDefaultsRequestSetOption_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestSetOption_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestSetOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestSetOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestSetOption_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestSetOption_types_2eproto}, {}};

static void InitDefaultsRequestInitChain_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestInitChain_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestInitChain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestInitChain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RequestInitChain_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRequestInitChain_types_2eproto}, {
      &scc_info_Timestamp_types_2eproto.base,
      &scc_info_ConsensusParams_types_2eproto.base,
      &scc_info_ValidatorUpdate_types_2eproto.base,}};

static void InitDefaultsRequestQuery_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestQuery_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuery_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestQuery_types_2eproto}, {}};

static void InitDefaultsRequestBeginBlock_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestBeginBlock_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestBeginBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestBeginBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RequestBeginBlock_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRequestBeginBlock_types_2eproto}, {
      &scc_info_Header_types_2eproto.base,
      &scc_info_LastCommitInfo_types_2eproto.base,
      &scc_info_Evidence_types_2eproto.base,}};

static void InitDefaultsRequestCheckTx_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestCheckTx_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestCheckTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestCheckTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestCheckTx_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestCheckTx_types_2eproto}, {}};

static void InitDefaultsRequestDeliverTx_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestDeliverTx_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestDeliverTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestDeliverTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestDeliverTx_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestDeliverTx_types_2eproto}, {}};

static void InitDefaultsRequestEndBlock_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestEndBlock_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestEndBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestEndBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestEndBlock_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestEndBlock_types_2eproto}, {}};

static void InitDefaultsRequestCommit_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_RequestCommit_default_instance_;
    new (ptr) ::suil::tmsp::types::RequestCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::RequestCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestCommit_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestCommit_types_2eproto}, {}};

static void InitDefaultsResponse_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Response_default_instance_;
    new (ptr) ::suil::tmsp::types::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_Response_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsResponse_types_2eproto}, {
      &scc_info_ResponseException_types_2eproto.base,
      &scc_info_ResponseEcho_types_2eproto.base,
      &scc_info_ResponseFlush_types_2eproto.base,
      &scc_info_ResponseInfo_types_2eproto.base,
      &scc_info_ResponseSetOption_types_2eproto.base,
      &scc_info_ResponseInitChain_types_2eproto.base,
      &scc_info_ResponseQuery_types_2eproto.base,
      &scc_info_ResponseBeginBlock_types_2eproto.base,
      &scc_info_ResponseCheckTx_types_2eproto.base,
      &scc_info_ResponseDeliverTx_types_2eproto.base,
      &scc_info_ResponseEndBlock_types_2eproto.base,
      &scc_info_ResponseCommit_types_2eproto.base,}};

static void InitDefaultsResponseException_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseException_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseException();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseException::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseException_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseException_types_2eproto}, {}};

static void InitDefaultsResponseEcho_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseEcho_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseEcho();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseEcho::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseEcho_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseEcho_types_2eproto}, {}};

static void InitDefaultsResponseFlush_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseFlush_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseFlush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseFlush::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseFlush_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseFlush_types_2eproto}, {}};

static void InitDefaultsResponseInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseInfo_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseInfo_types_2eproto}, {}};

static void InitDefaultsResponseSetOption_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseSetOption_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseSetOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseSetOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSetOption_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseSetOption_types_2eproto}, {}};

static void InitDefaultsResponseInitChain_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseInitChain_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseInitChain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseInitChain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ResponseInitChain_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsResponseInitChain_types_2eproto}, {
      &scc_info_ConsensusParams_types_2eproto.base,
      &scc_info_ValidatorUpdate_types_2eproto.base,}};

static void InitDefaultsResponseQuery_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseQuery_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseQuery_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseQuery_types_2eproto}, {
      &scc_info_Proof_types_2eproto.base,}};

static void InitDefaultsResponseBeginBlock_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseBeginBlock_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseBeginBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseBeginBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseBeginBlock_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseBeginBlock_types_2eproto}, {
      &scc_info_KVPair_types_2eproto.base,}};

static void InitDefaultsResponseCheckTx_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseCheckTx_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseCheckTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseCheckTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseCheckTx_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseCheckTx_types_2eproto}, {
      &scc_info_KVPair_types_2eproto.base,}};

static void InitDefaultsResponseDeliverTx_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseDeliverTx_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseDeliverTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseDeliverTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseDeliverTx_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseDeliverTx_types_2eproto}, {
      &scc_info_KVPair_types_2eproto.base,}};

static void InitDefaultsResponseEndBlock_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseEndBlock_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseEndBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseEndBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ResponseEndBlock_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResponseEndBlock_types_2eproto}, {
      &scc_info_ValidatorUpdate_types_2eproto.base,
      &scc_info_ConsensusParams_types_2eproto.base,
      &scc_info_KVPair_types_2eproto.base,}};

static void InitDefaultsResponseCommit_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ResponseCommit_default_instance_;
    new (ptr) ::suil::tmsp::types::ResponseCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ResponseCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseCommit_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseCommit_types_2eproto}, {}};

static void InitDefaultsConsensusParams_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ConsensusParams_default_instance_;
    new (ptr) ::suil::tmsp::types::ConsensusParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ConsensusParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ConsensusParams_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsConsensusParams_types_2eproto}, {
      &scc_info_BlockSizeParams_types_2eproto.base,
      &scc_info_EvidenceParams_types_2eproto.base,
      &scc_info_ValidatorParams_types_2eproto.base,}};

static void InitDefaultsBlockSizeParams_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_BlockSizeParams_default_instance_;
    new (ptr) ::suil::tmsp::types::BlockSizeParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::BlockSizeParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockSizeParams_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockSizeParams_types_2eproto}, {}};

static void InitDefaultsEvidenceParams_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_EvidenceParams_default_instance_;
    new (ptr) ::suil::tmsp::types::EvidenceParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::EvidenceParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EvidenceParams_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvidenceParams_types_2eproto}, {}};

static void InitDefaultsValidatorParams_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ValidatorParams_default_instance_;
    new (ptr) ::suil::tmsp::types::ValidatorParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ValidatorParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ValidatorParams_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValidatorParams_types_2eproto}, {}};

static void InitDefaultsLastCommitInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_LastCommitInfo_default_instance_;
    new (ptr) ::suil::tmsp::types::LastCommitInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::LastCommitInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LastCommitInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLastCommitInfo_types_2eproto}, {
      &scc_info_VoteInfo_types_2eproto.base,}};

static void InitDefaultsHeader_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Header_default_instance_;
    new (ptr) ::suil::tmsp::types::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Header_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHeader_types_2eproto}, {
      &scc_info_Version_types_2eproto.base,
      &scc_info_Timestamp_types_2eproto.base,
      &scc_info_BlockID_types_2eproto.base,}};

static void InitDefaultsVersion_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Version_default_instance_;
    new (ptr) ::suil::tmsp::types::Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Version_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersion_types_2eproto}, {}};

static void InitDefaultsBlockID_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_BlockID_default_instance_;
    new (ptr) ::suil::tmsp::types::BlockID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::BlockID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlockID_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlockID_types_2eproto}, {
      &scc_info_PartSetHeader_types_2eproto.base,}};

static void InitDefaultsPartSetHeader_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_PartSetHeader_default_instance_;
    new (ptr) ::suil::tmsp::types::PartSetHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::PartSetHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartSetHeader_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartSetHeader_types_2eproto}, {}};

static void InitDefaultsValidator_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Validator_default_instance_;
    new (ptr) ::suil::tmsp::types::Validator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Validator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Validator_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsValidator_types_2eproto}, {}};

static void InitDefaultsValidatorUpdate_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_ValidatorUpdate_default_instance_;
    new (ptr) ::suil::tmsp::types::ValidatorUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::ValidatorUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ValidatorUpdate_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsValidatorUpdate_types_2eproto}, {
      &scc_info_PubKey_types_2eproto.base,}};

static void InitDefaultsVoteInfo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_VoteInfo_default_instance_;
    new (ptr) ::suil::tmsp::types::VoteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::VoteInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VoteInfo_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVoteInfo_types_2eproto}, {
      &scc_info_Validator_types_2eproto.base,}};

static void InitDefaultsPubKey_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_PubKey_default_instance_;
    new (ptr) ::suil::tmsp::types::PubKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::PubKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PubKey_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPubKey_types_2eproto}, {}};

static void InitDefaultsEvidence_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::suil::tmsp::types::_Evidence_default_instance_;
    new (ptr) ::suil::tmsp::types::Evidence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::suil::tmsp::types::Evidence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Evidence_types_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEvidence_types_2eproto}, {
      &scc_info_Validator_types_2eproto.base,
      &scc_info_Timestamp_types_2eproto.base,}};

namespace suil {
namespace tmsp {
namespace types {

// ===================================================================

void ProofOp::InitAsDefaultInstance() {
}
class ProofOp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProofOp::kTypeFieldNumber;
const int ProofOp::kKeyFieldNumber;
const int ProofOp::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProofOp::ProofOp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ProofOp)
}
ProofOp::ProofOp(const ProofOp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ProofOp)
}

void ProofOp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProofOp_types_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProofOp::~ProofOp() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ProofOp)
  SharedDtor();
}

void ProofOp::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProofOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProofOp& ProofOp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProofOp_types_2eproto.base);
  return *internal_default_instance();
}


void ProofOp::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ProofOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProofOp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProofOp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProofOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ProofOp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ProofOp.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ProofOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ProofOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProofOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ProofOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ProofOp.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ProofOp)
}

size_t ProofOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ProofOp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofOp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProofOp*>(&from));
}

void ProofOp::MergeFrom(const ProofOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ProofOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ProofOp::CopyFrom(const ProofOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ProofOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOp::IsInitialized() const {
  return true;
}

void ProofOp::Swap(ProofOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProofOp::InternalSwap(ProofOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string ProofOp::GetTypeName() const {
  return "suil.tmsp.types.ProofOp";
}


// ===================================================================

void Proof::InitAsDefaultInstance() {
}
class Proof::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proof::kOpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proof::Proof()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Proof)
}
Proof::Proof(const Proof& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Proof)
}

void Proof::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Proof_types_2eproto.base);
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Proof)
  SharedDtor();
}

void Proof::SharedDtor() {
}

void Proof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proof& Proof::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Proof_types_2eproto.base);
  return *internal_default_instance();
}


void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Proof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Proof::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Proof*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .suil.tmsp.types.ProofOp ops = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::ProofOp::_InternalParse;
          object = msg->add_ops();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Proof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Proof)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.ProofOp ops = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ops()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Proof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Proof)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Proof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Proof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ProofOp ops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ops_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->ops(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Proof)
}

size_t Proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Proof)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ProofOp ops = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ops_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ops(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proof::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Proof*>(&from));
}

void Proof::MergeFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Proof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {
  return true;
}

void Proof::Swap(Proof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proof::InternalSwap(Proof* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ops_)->InternalSwap(CastToBase(&other->ops_));
}

::std::string Proof::GetTypeName() const {
  return "suil.tmsp.types.Proof";
}


// ===================================================================

void KVPair::InitAsDefaultInstance() {
}
class KVPair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVPair::kKeyFieldNumber;
const int KVPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVPair::KVPair()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.KVPair)
}
KVPair::KVPair(const KVPair& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.KVPair)
}

void KVPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KVPair_types_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KVPair::~KVPair() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.KVPair)
  SharedDtor();
}

void KVPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KVPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KVPair& KVPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KVPair_types_2eproto.base);
  return *internal_default_instance();
}


void KVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.KVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KVPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KVPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KVPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.KVPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.KVPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.KVPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KVPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.KVPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.KVPair)
}

size_t KVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.KVPair)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KVPair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KVPair*>(&from));
}

void KVPair::MergeFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.KVPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KVPair::CopyFrom(const KVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.KVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPair::IsInitialized() const {
  return true;
}

void KVPair::Swap(KVPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVPair::InternalSwap(KVPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string KVPair::GetTypeName() const {
  return "suil.tmsp.types.KVPair";
}


// ===================================================================

void KI64Pair::InitAsDefaultInstance() {
}
class KI64Pair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KI64Pair::kKeyFieldNumber;
const int KI64Pair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KI64Pair::KI64Pair()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.KI64Pair)
}
KI64Pair::KI64Pair(const KI64Pair& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.KI64Pair)
}

void KI64Pair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KI64Pair_types_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

KI64Pair::~KI64Pair() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.KI64Pair)
  SharedDtor();
}

void KI64Pair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KI64Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KI64Pair& KI64Pair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KI64Pair_types_2eproto.base);
  return *internal_default_instance();
}


void KI64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.KI64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KI64Pair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KI64Pair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KI64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.KI64Pair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.KI64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.KI64Pair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KI64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.KI64Pair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.KI64Pair)
}

size_t KI64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.KI64Pair)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KI64Pair::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KI64Pair*>(&from));
}

void KI64Pair::MergeFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.KI64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void KI64Pair::CopyFrom(const KI64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.KI64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KI64Pair::IsInitialized() const {
  return true;
}

void KI64Pair::Swap(KI64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KI64Pair::InternalSwap(KI64Pair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::std::string KI64Pair::GetTypeName() const {
  return "suil.tmsp.types.KI64Pair";
}


// ===================================================================

void Timestamp::InitAsDefaultInstance() {
}
class Timestamp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecondsFieldNumber;
const int Timestamp::kNanosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timestamp& Timestamp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Timestamp_types_2eproto.base);
  return *internal_default_instance();
}


void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Timestamp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Timestamp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 seconds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 nanos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_nanos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Timestamp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nanos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Timestamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nanos(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Timestamp)
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Timestamp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seconds());
  }

  // int32 nanos = 2;
  if (this->nanos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nanos());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timestamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Timestamp*>(&from));
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
  if (from.nanos() != 0) {
    set_nanos(from.nanos());
  }
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seconds_, other->seconds_);
  swap(nanos_, other->nanos_);
}

::std::string Timestamp::GetTypeName() const {
  return "suil.tmsp.types.Timestamp";
}


// ===================================================================

void Request::InitAsDefaultInstance() {
}
class Request::HasBitSetters {
 public:
  static const ::suil::tmsp::types::RequestEcho& echo(const Request* msg);
  static const ::suil::tmsp::types::RequestFlush& flush(const Request* msg);
  static const ::suil::tmsp::types::RequestInfo& info(const Request* msg);
  static const ::suil::tmsp::types::RequestSetOption& set_option(const Request* msg);
  static const ::suil::tmsp::types::RequestInitChain& init_chain(const Request* msg);
  static const ::suil::tmsp::types::RequestQuery& query(const Request* msg);
  static const ::suil::tmsp::types::RequestBeginBlock& begin_block(const Request* msg);
  static const ::suil::tmsp::types::RequestCheckTx& check_tx(const Request* msg);
  static const ::suil::tmsp::types::RequestDeliverTx& deliver_tx(const Request* msg);
  static const ::suil::tmsp::types::RequestEndBlock& end_block(const Request* msg);
  static const ::suil::tmsp::types::RequestCommit& commit(const Request* msg);
};

const ::suil::tmsp::types::RequestEcho&
Request::HasBitSetters::echo(const Request* msg) {
  return *msg->value_.echo_;
}
const ::suil::tmsp::types::RequestFlush&
Request::HasBitSetters::flush(const Request* msg) {
  return *msg->value_.flush_;
}
const ::suil::tmsp::types::RequestInfo&
Request::HasBitSetters::info(const Request* msg) {
  return *msg->value_.info_;
}
const ::suil::tmsp::types::RequestSetOption&
Request::HasBitSetters::set_option(const Request* msg) {
  return *msg->value_.set_option_;
}
const ::suil::tmsp::types::RequestInitChain&
Request::HasBitSetters::init_chain(const Request* msg) {
  return *msg->value_.init_chain_;
}
const ::suil::tmsp::types::RequestQuery&
Request::HasBitSetters::query(const Request* msg) {
  return *msg->value_.query_;
}
const ::suil::tmsp::types::RequestBeginBlock&
Request::HasBitSetters::begin_block(const Request* msg) {
  return *msg->value_.begin_block_;
}
const ::suil::tmsp::types::RequestCheckTx&
Request::HasBitSetters::check_tx(const Request* msg) {
  return *msg->value_.check_tx_;
}
const ::suil::tmsp::types::RequestDeliverTx&
Request::HasBitSetters::deliver_tx(const Request* msg) {
  return *msg->value_.deliver_tx_;
}
const ::suil::tmsp::types::RequestEndBlock&
Request::HasBitSetters::end_block(const Request* msg) {
  return *msg->value_.end_block_;
}
const ::suil::tmsp::types::RequestCommit&
Request::HasBitSetters::commit(const Request* msg) {
  return *msg->value_.commit_;
}
void Request::set_allocated_echo(::suil::tmsp::types::RequestEcho* echo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (echo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      echo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.echo)
}
void Request::set_allocated_flush(::suil::tmsp::types::RequestFlush* flush) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (flush) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flush = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.flush)
}
void Request::set_allocated_info(::suil::tmsp::types::RequestInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.info)
}
void Request::set_allocated_set_option(::suil::tmsp::types::RequestSetOption* set_option) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (set_option) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_option = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.set_option)
}
void Request::set_allocated_init_chain(::suil::tmsp::types::RequestInitChain* init_chain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_chain) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init_chain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.init_chain)
}
void Request::set_allocated_query(::suil::tmsp::types::RequestQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.query)
}
void Request::set_allocated_begin_block(::suil::tmsp::types::RequestBeginBlock* begin_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (begin_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      begin_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.begin_block)
}
void Request::set_allocated_check_tx(::suil::tmsp::types::RequestCheckTx* check_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.check_tx)
}
void Request::set_allocated_deliver_tx(::suil::tmsp::types::RequestDeliverTx* deliver_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (deliver_tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deliver_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.deliver_tx)
}
void Request::set_allocated_end_block(::suil::tmsp::types::RequestEndBlock* end_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.end_block)
}
void Request::set_allocated_commit(::suil::tmsp::types::RequestCommit* commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (commit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Request.commit)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kEchoFieldNumber;
const int Request::kFlushFieldNumber;
const int Request::kInfoFieldNumber;
const int Request::kSetOptionFieldNumber;
const int Request::kInitChainFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kBeginBlockFieldNumber;
const int Request::kCheckTxFieldNumber;
const int Request::kDeliverTxFieldNumber;
const int Request::kEndBlockFieldNumber;
const int Request::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Request_types_2eproto.base);
  clear_has_value();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Request_types_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:suil.tmsp.types.Request)
  switch (value_case()) {
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.RequestEcho echo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestEcho::_InternalParse;
        object = msg->mutable_echo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestFlush flush = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestFlush::_InternalParse;
        object = msg->mutable_flush();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestInfo info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestInfo::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestSetOption set_option = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestSetOption::_InternalParse;
        object = msg->mutable_set_option();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestInitChain init_chain = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestInitChain::_InternalParse;
        object = msg->mutable_init_chain();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestQuery query = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestQuery::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestBeginBlock::_InternalParse;
        object = msg->mutable_begin_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestCheckTx check_tx = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestCheckTx::_InternalParse;
        object = msg->mutable_check_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestEndBlock end_block = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestEndBlock::_InternalParse;
        object = msg->mutable_end_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestCommit commit = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestCommit::_InternalParse;
        object = msg->mutable_commit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::RequestDeliverTx::_InternalParse;
        object = msg->mutable_deliver_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.RequestEcho echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestFlush flush = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestInfo info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestSetOption set_option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestInitChain init_chain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestQuery query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestCheckTx check_tx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestEndBlock end_block = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestCommit commit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.RequestEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::echo(this), output);
  }

  // .suil.tmsp.types.RequestFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::flush(this), output);
  }

  // .suil.tmsp.types.RequestInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::info(this), output);
  }

  // .suil.tmsp.types.RequestSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::set_option(this), output);
  }

  // .suil.tmsp.types.RequestInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, HasBitSetters::init_chain(this), output);
  }

  // .suil.tmsp.types.RequestQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, HasBitSetters::query(this), output);
  }

  // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, HasBitSetters::begin_block(this), output);
  }

  // .suil.tmsp.types.RequestCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, HasBitSetters::check_tx(this), output);
  }

  // .suil.tmsp.types.RequestEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, HasBitSetters::end_block(this), output);
  }

  // .suil.tmsp.types.RequestCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, HasBitSetters::commit(this), output);
  }

  // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, HasBitSetters::deliver_tx(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Request)
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Request)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .suil.tmsp.types.RequestEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .suil.tmsp.types.RequestFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .suil.tmsp.types.RequestInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .suil.tmsp.types.RequestSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .suil.tmsp.types.RequestInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .suil.tmsp.types.RequestQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .suil.tmsp.types.RequestBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .suil.tmsp.types.RequestCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .suil.tmsp.types.RequestDeliverTx deliver_tx = 19;
    case kDeliverTx: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .suil.tmsp.types.RequestEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .suil.tmsp.types.RequestCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request*>(&from));
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::RequestEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::RequestFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::RequestInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::RequestSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::RequestInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::RequestBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::RequestCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::RequestDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::RequestEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::RequestCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::std::string Request::GetTypeName() const {
  return "suil.tmsp.types.Request";
}


// ===================================================================

void RequestEcho::InitAsDefaultInstance() {
}
class RequestEcho::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEcho::RequestEcho()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestEcho)
}
RequestEcho::RequestEcho(const RequestEcho& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestEcho)
}

void RequestEcho::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestEcho_types_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestEcho::~RequestEcho() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestEcho)
  SharedDtor();
}

void RequestEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestEcho::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestEcho& RequestEcho::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestEcho_types_2eproto.base);
  return *internal_default_instance();
}


void RequestEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestEcho::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestEcho*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestEcho)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestEcho)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestEcho)
}

size_t RequestEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestEcho)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestEcho::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestEcho*>(&from));
}

void RequestEcho::MergeFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RequestEcho::CopyFrom(const RequestEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEcho::IsInitialized() const {
  return true;
}

void RequestEcho::Swap(RequestEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEcho::InternalSwap(RequestEcho* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string RequestEcho::GetTypeName() const {
  return "suil.tmsp.types.RequestEcho";
}


// ===================================================================

void RequestFlush::InitAsDefaultInstance() {
}
class RequestFlush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFlush::RequestFlush()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestFlush)
}
RequestFlush::RequestFlush(const RequestFlush& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestFlush)
}

void RequestFlush::SharedCtor() {
}

RequestFlush::~RequestFlush() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestFlush)
  SharedDtor();
}

void RequestFlush::SharedDtor() {
}

void RequestFlush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestFlush& RequestFlush::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestFlush_types_2eproto.base);
  return *internal_default_instance();
}


void RequestFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestFlush::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestFlush*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestFlush)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestFlush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestFlush)
}

size_t RequestFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestFlush)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestFlush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestFlush*>(&from));
}

void RequestFlush::MergeFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestFlush::CopyFrom(const RequestFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFlush::IsInitialized() const {
  return true;
}

void RequestFlush::Swap(RequestFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFlush::InternalSwap(RequestFlush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestFlush::GetTypeName() const {
  return "suil.tmsp.types.RequestFlush";
}


// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
}
class RequestInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInfo::kVersionFieldNumber;
const int RequestInfo::kBlockVersionFieldNumber;
const int RequestInfo::kP2PVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInfo::RequestInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&block_version_, &from.block_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_version_) -
    reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestInfo)
}

void RequestInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestInfo_types_2eproto.base);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_version_) -
      reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInfo& RequestInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestInfo_types_2eproto.base);
  return *internal_default_instance();
}


void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_version_) -
      reinterpret_cast<char*>(&block_version_)) + sizeof(p2p_version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 block_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_block_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 p2p_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_p2p_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 block_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 p2p_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &p2p_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // uint64 block_version = 2;
  if (this->block_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->block_version(), output);
  }

  // uint64 p2p_version = 3;
  if (this->p2p_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->p2p_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestInfo)
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // uint64 block_version = 2;
  if (this->block_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block_version());
  }

  // uint64 p2p_version = 3;
  if (this->p2p_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->p2p_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestInfo*>(&from));
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.block_version() != 0) {
    set_block_version(from.block_version());
  }
  if (from.p2p_version() != 0) {
    set_p2p_version(from.p2p_version());
  }
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::Swap(RequestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_version_, other->block_version_);
  swap(p2p_version_, other->p2p_version_);
}

::std::string RequestInfo::GetTypeName() const {
  return "suil.tmsp.types.RequestInfo";
}


// ===================================================================

void RequestSetOption::InitAsDefaultInstance() {
}
class RequestSetOption::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSetOption::kKeyFieldNumber;
const int RequestSetOption::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSetOption::RequestSetOption()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestSetOption)
}
RequestSetOption::RequestSetOption(const RequestSetOption& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestSetOption)
}

void RequestSetOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestSetOption_types_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestSetOption::~RequestSetOption() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestSetOption)
  SharedDtor();
}

void RequestSetOption::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestSetOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestSetOption& RequestSetOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestSetOption_types_2eproto.base);
  return *internal_default_instance();
}


void RequestSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestSetOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestSetOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestSetOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestSetOption.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestSetOption.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestSetOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestSetOption.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestSetOption)
}

size_t RequestSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestSetOption)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSetOption::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestSetOption*>(&from));
}

void RequestSetOption::MergeFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RequestSetOption::CopyFrom(const RequestSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetOption::IsInitialized() const {
  return true;
}

void RequestSetOption::Swap(RequestSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSetOption::InternalSwap(RequestSetOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string RequestSetOption::GetTypeName() const {
  return "suil.tmsp.types.RequestSetOption";
}


// ===================================================================

void RequestInitChain::InitAsDefaultInstance() {
  ::suil::tmsp::types::_RequestInitChain_default_instance_._instance.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
  ::suil::tmsp::types::_RequestInitChain_default_instance_._instance.get_mutable()->consensus_params_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
}
class RequestInitChain::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Timestamp& time(const RequestInitChain* msg);
  static const ::suil::tmsp::types::ConsensusParams& consensus_params(const RequestInitChain* msg);
};

const ::suil::tmsp::types::Timestamp&
RequestInitChain::HasBitSetters::time(const RequestInitChain* msg) {
  return *msg->time_;
}
const ::suil::tmsp::types::ConsensusParams&
RequestInitChain::HasBitSetters::consensus_params(const RequestInitChain* msg) {
  return *msg->consensus_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestInitChain::kTimeFieldNumber;
const int RequestInitChain::kChainIdFieldNumber;
const int RequestInitChain::kConsensusParamsFieldNumber;
const int RequestInitChain::kValidatorsFieldNumber;
const int RequestInitChain::kAppStateBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestInitChain::RequestInitChain()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestInitChain)
}
RequestInitChain::RequestInitChain(const RequestInitChain& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_state_bytes().size() > 0) {
    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_consensus_params()) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestInitChain)
}

void RequestInitChain::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestInitChain_types_2eproto.base);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consensus_params_) -
      reinterpret_cast<char*>(&time_)) + sizeof(consensus_params_));
}

RequestInitChain::~RequestInitChain() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestInitChain)
  SharedDtor();
}

void RequestInitChain::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete consensus_params_;
}

void RequestInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInitChain& RequestInitChain::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestInitChain_types_2eproto.base);
  return *internal_default_instance();
}


void RequestInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_state_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestInitChain::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestInitChain*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.Timestamp time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string chain_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_chain_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .suil.tmsp.types.ConsensusParams consensus_params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ConsensusParams::_InternalParse;
        object = msg->mutable_consensus_params();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::ValidatorUpdate::_InternalParse;
          object = msg->add_validators();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // bytes app_state_bytes = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_app_state_bytes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestInitChain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Timestamp time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), static_cast<int>(this->chain_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestInitChain.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ConsensusParams consensus_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consensus_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes app_state_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_state_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestInitChain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.Timestamp time = 1;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::time(this), output);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestInitChain.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 3;
  if (this->has_consensus_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::consensus_params(this), output);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->validators(static_cast<int>(i)),
      output);
  }

  // bytes app_state_bytes = 5;
  if (this->app_state_bytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->app_state_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestInitChain)
}

size_t RequestInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestInitChain)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->validators(static_cast<int>(i)));
    }
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // bytes app_state_bytes = 5;
  if (this->app_state_bytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_state_bytes());
  }

  // .suil.tmsp.types.Timestamp time = 1;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 3;
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInitChain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestInitChain*>(&from));
}

void RequestInitChain::MergeFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.app_state_bytes().size() > 0) {

    app_state_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_state_bytes_);
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.has_consensus_params()) {
    mutable_consensus_params()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_params());
  }
}

void RequestInitChain::CopyFrom(const RequestInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInitChain::IsInitialized() const {
  return true;
}

void RequestInitChain::Swap(RequestInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestInitChain::InternalSwap(RequestInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&validators_)->InternalSwap(CastToBase(&other->validators_));
  chain_id_.Swap(&other->chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_state_bytes_.Swap(&other->app_state_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(consensus_params_, other->consensus_params_);
}

::std::string RequestInitChain::GetTypeName() const {
  return "suil.tmsp.types.RequestInitChain";
}


// ===================================================================

void RequestQuery::InitAsDefaultInstance() {
}
class RequestQuery::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kDataFieldNumber;
const int RequestQuery::kPathFieldNumber;
const int RequestQuery::kHeightFieldNumber;
const int RequestQuery::kProveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&prove_) -
    reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestQuery)
}

void RequestQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestQuery_types_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prove_) -
      reinterpret_cast<char*>(&height_)) + sizeof(prove_));
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestQuery& RequestQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestQuery_types_2eproto.base);
  return *internal_default_instance();
}


void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prove_) -
      reinterpret_cast<char*>(&height_)) + sizeof(prove_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool prove = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_prove(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.RequestQuery.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prove = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prove_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.RequestQuery.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->prove(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestQuery)
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestQuery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // bool prove = 4;
  if (this->prove() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestQuery*>(&from));
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.prove() != 0) {
    set_prove(from.prove());
  }
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(prove_, other->prove_);
}

::std::string RequestQuery::GetTypeName() const {
  return "suil.tmsp.types.RequestQuery";
}


// ===================================================================

void RequestBeginBlock::InitAsDefaultInstance() {
  ::suil::tmsp::types::_RequestBeginBlock_default_instance_._instance.get_mutable()->header_ = const_cast< ::suil::tmsp::types::Header*>(
      ::suil::tmsp::types::Header::internal_default_instance());
  ::suil::tmsp::types::_RequestBeginBlock_default_instance_._instance.get_mutable()->last_commit_info_ = const_cast< ::suil::tmsp::types::LastCommitInfo*>(
      ::suil::tmsp::types::LastCommitInfo::internal_default_instance());
}
class RequestBeginBlock::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Header& header(const RequestBeginBlock* msg);
  static const ::suil::tmsp::types::LastCommitInfo& last_commit_info(const RequestBeginBlock* msg);
};

const ::suil::tmsp::types::Header&
RequestBeginBlock::HasBitSetters::header(const RequestBeginBlock* msg) {
  return *msg->header_;
}
const ::suil::tmsp::types::LastCommitInfo&
RequestBeginBlock::HasBitSetters::last_commit_info(const RequestBeginBlock* msg) {
  return *msg->last_commit_info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBeginBlock::kHashFieldNumber;
const int RequestBeginBlock::kHeaderFieldNumber;
const int RequestBeginBlock::kLastCommitInfoFieldNumber;
const int RequestBeginBlock::kByzantineValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBeginBlock::RequestBeginBlock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestBeginBlock)
}
RequestBeginBlock::RequestBeginBlock(const RequestBeginBlock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      byzantine_validators_(from.byzantine_validators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    header_ = new ::suil::tmsp::types::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_last_commit_info()) {
    last_commit_info_ = new ::suil::tmsp::types::LastCommitInfo(*from.last_commit_info_);
  } else {
    last_commit_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestBeginBlock)
}

void RequestBeginBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestBeginBlock_types_2eproto.base);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_commit_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(last_commit_info_));
}

RequestBeginBlock::~RequestBeginBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestBeginBlock)
  SharedDtor();
}

void RequestBeginBlock::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete last_commit_info_;
}

void RequestBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestBeginBlock& RequestBeginBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestBeginBlock_types_2eproto.base);
  return *internal_default_instance();
}


void RequestBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byzantine_validators_.Clear();
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_commit_info_ != nullptr) {
    delete last_commit_info_;
  }
  last_commit_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestBeginBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestBeginBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .suil.tmsp.types.Header header = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Header::_InternalParse;
        object = msg->mutable_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::LastCommitInfo::_InternalParse;
        object = msg->mutable_last_commit_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::Evidence::_InternalParse;
          object = msg->add_byzantine_validators();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestBeginBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_commit_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_byzantine_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestBeginBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .suil.tmsp.types.Header header = 2;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::header(this), output);
  }

  // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
  if (this->has_last_commit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::last_commit_info(this), output);
  }

  // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->byzantine_validators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->byzantine_validators(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestBeginBlock)
}

size_t RequestBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestBeginBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.Evidence byzantine_validators = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->byzantine_validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->byzantine_validators(static_cast<int>(i)));
    }
  }

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .suil.tmsp.types.Header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .suil.tmsp.types.LastCommitInfo last_commit_info = 3;
  if (this->has_last_commit_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_commit_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBeginBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestBeginBlock*>(&from));
}

void RequestBeginBlock::MergeFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  byzantine_validators_.MergeFrom(from.byzantine_validators_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_header()) {
    mutable_header()->::suil::tmsp::types::Header::MergeFrom(from.header());
  }
  if (from.has_last_commit_info()) {
    mutable_last_commit_info()->::suil::tmsp::types::LastCommitInfo::MergeFrom(from.last_commit_info());
  }
}

void RequestBeginBlock::CopyFrom(const RequestBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBeginBlock::IsInitialized() const {
  return true;
}

void RequestBeginBlock::Swap(RequestBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBeginBlock::InternalSwap(RequestBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&byzantine_validators_)->InternalSwap(CastToBase(&other->byzantine_validators_));
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(last_commit_info_, other->last_commit_info_);
}

::std::string RequestBeginBlock::GetTypeName() const {
  return "suil.tmsp.types.RequestBeginBlock";
}


// ===================================================================

void RequestCheckTx::InitAsDefaultInstance() {
}
class RequestCheckTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCheckTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCheckTx::RequestCheckTx()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestCheckTx)
}
RequestCheckTx::RequestCheckTx(const RequestCheckTx& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestCheckTx)
}

void RequestCheckTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestCheckTx_types_2eproto.base);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestCheckTx::~RequestCheckTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestCheckTx)
  SharedDtor();
}

void RequestCheckTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestCheckTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestCheckTx& RequestCheckTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestCheckTx_types_2eproto.base);
  return *internal_default_instance();
}


void RequestCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestCheckTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestCheckTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestCheckTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestCheckTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestCheckTx)
}

size_t RequestCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestCheckTx)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCheckTx::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCheckTx*>(&from));
}

void RequestCheckTx::MergeFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestCheckTx::CopyFrom(const RequestCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckTx::IsInitialized() const {
  return true;
}

void RequestCheckTx::Swap(RequestCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCheckTx::InternalSwap(RequestCheckTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string RequestCheckTx::GetTypeName() const {
  return "suil.tmsp.types.RequestCheckTx";
}


// ===================================================================

void RequestDeliverTx::InitAsDefaultInstance() {
}
class RequestDeliverTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDeliverTx::kTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDeliverTx::RequestDeliverTx()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestDeliverTx)
}
RequestDeliverTx::RequestDeliverTx(const RequestDeliverTx& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tx().size() > 0) {
    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestDeliverTx)
}

void RequestDeliverTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RequestDeliverTx_types_2eproto.base);
  tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestDeliverTx::~RequestDeliverTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestDeliverTx)
  SharedDtor();
}

void RequestDeliverTx::SharedDtor() {
  tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestDeliverTx& RequestDeliverTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestDeliverTx_types_2eproto.base);
  return *internal_default_instance();
}


void RequestDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestDeliverTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestDeliverTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes tx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_tx();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestDeliverTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestDeliverTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestDeliverTx)
}

size_t RequestDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestDeliverTx)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1;
  if (this->tx().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestDeliverTx::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestDeliverTx*>(&from));
}

void RequestDeliverTx::MergeFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx().size() > 0) {

    tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_);
  }
}

void RequestDeliverTx::CopyFrom(const RequestDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDeliverTx::IsInitialized() const {
  return true;
}

void RequestDeliverTx::Swap(RequestDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDeliverTx::InternalSwap(RequestDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_.Swap(&other->tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string RequestDeliverTx::GetTypeName() const {
  return "suil.tmsp.types.RequestDeliverTx";
}


// ===================================================================

void RequestEndBlock::InitAsDefaultInstance() {
}
class RequestEndBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestEndBlock::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestEndBlock::RequestEndBlock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestEndBlock)
}
RequestEndBlock::RequestEndBlock(const RequestEndBlock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestEndBlock)
}

void RequestEndBlock::SharedCtor() {
  height_ = PROTOBUF_LONGLONG(0);
}

RequestEndBlock::~RequestEndBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestEndBlock)
  SharedDtor();
}

void RequestEndBlock::SharedDtor() {
}

void RequestEndBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestEndBlock& RequestEndBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestEndBlock_types_2eproto.base);
  return *internal_default_instance();
}


void RequestEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestEndBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestEndBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 height = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestEndBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestEndBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestEndBlock)
}

size_t RequestEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestEndBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestEndBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestEndBlock*>(&from));
}

void RequestEndBlock::MergeFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
}

void RequestEndBlock::CopyFrom(const RequestEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEndBlock::IsInitialized() const {
  return true;
}

void RequestEndBlock::Swap(RequestEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestEndBlock::InternalSwap(RequestEndBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::std::string RequestEndBlock::GetTypeName() const {
  return "suil.tmsp.types.RequestEndBlock";
}


// ===================================================================

void RequestCommit::InitAsDefaultInstance() {
}
class RequestCommit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCommit::RequestCommit()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.RequestCommit)
}
RequestCommit::RequestCommit(const RequestCommit& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.RequestCommit)
}

void RequestCommit::SharedCtor() {
}

RequestCommit::~RequestCommit() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.RequestCommit)
  SharedDtor();
}

void RequestCommit::SharedDtor() {
}

void RequestCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestCommit& RequestCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestCommit_types_2eproto.base);
  return *internal_default_instance();
}


void RequestCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.RequestCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestCommit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestCommit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.RequestCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.RequestCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.RequestCommit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.RequestCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.RequestCommit)
}

size_t RequestCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.RequestCommit)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCommit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestCommit*>(&from));
}

void RequestCommit::MergeFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.RequestCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestCommit::CopyFrom(const RequestCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.RequestCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommit::IsInitialized() const {
  return true;
}

void RequestCommit::Swap(RequestCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCommit::InternalSwap(RequestCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RequestCommit::GetTypeName() const {
  return "suil.tmsp.types.RequestCommit";
}


// ===================================================================

void Response::InitAsDefaultInstance() {
}
class Response::HasBitSetters {
 public:
  static const ::suil::tmsp::types::ResponseException& exception(const Response* msg);
  static const ::suil::tmsp::types::ResponseEcho& echo(const Response* msg);
  static const ::suil::tmsp::types::ResponseFlush& flush(const Response* msg);
  static const ::suil::tmsp::types::ResponseInfo& info(const Response* msg);
  static const ::suil::tmsp::types::ResponseSetOption& set_option(const Response* msg);
  static const ::suil::tmsp::types::ResponseInitChain& init_chain(const Response* msg);
  static const ::suil::tmsp::types::ResponseQuery& query(const Response* msg);
  static const ::suil::tmsp::types::ResponseBeginBlock& begin_block(const Response* msg);
  static const ::suil::tmsp::types::ResponseCheckTx& check_tx(const Response* msg);
  static const ::suil::tmsp::types::ResponseDeliverTx& deliver_tx(const Response* msg);
  static const ::suil::tmsp::types::ResponseEndBlock& end_block(const Response* msg);
  static const ::suil::tmsp::types::ResponseCommit& commit(const Response* msg);
};

const ::suil::tmsp::types::ResponseException&
Response::HasBitSetters::exception(const Response* msg) {
  return *msg->value_.exception_;
}
const ::suil::tmsp::types::ResponseEcho&
Response::HasBitSetters::echo(const Response* msg) {
  return *msg->value_.echo_;
}
const ::suil::tmsp::types::ResponseFlush&
Response::HasBitSetters::flush(const Response* msg) {
  return *msg->value_.flush_;
}
const ::suil::tmsp::types::ResponseInfo&
Response::HasBitSetters::info(const Response* msg) {
  return *msg->value_.info_;
}
const ::suil::tmsp::types::ResponseSetOption&
Response::HasBitSetters::set_option(const Response* msg) {
  return *msg->value_.set_option_;
}
const ::suil::tmsp::types::ResponseInitChain&
Response::HasBitSetters::init_chain(const Response* msg) {
  return *msg->value_.init_chain_;
}
const ::suil::tmsp::types::ResponseQuery&
Response::HasBitSetters::query(const Response* msg) {
  return *msg->value_.query_;
}
const ::suil::tmsp::types::ResponseBeginBlock&
Response::HasBitSetters::begin_block(const Response* msg) {
  return *msg->value_.begin_block_;
}
const ::suil::tmsp::types::ResponseCheckTx&
Response::HasBitSetters::check_tx(const Response* msg) {
  return *msg->value_.check_tx_;
}
const ::suil::tmsp::types::ResponseDeliverTx&
Response::HasBitSetters::deliver_tx(const Response* msg) {
  return *msg->value_.deliver_tx_;
}
const ::suil::tmsp::types::ResponseEndBlock&
Response::HasBitSetters::end_block(const Response* msg) {
  return *msg->value_.end_block_;
}
const ::suil::tmsp::types::ResponseCommit&
Response::HasBitSetters::commit(const Response* msg) {
  return *msg->value_.commit_;
}
void Response::set_allocated_exception(::suil::tmsp::types::ResponseException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    set_has_exception();
    value_.exception_ = exception;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.exception)
}
void Response::set_allocated_echo(::suil::tmsp::types::ResponseEcho* echo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (echo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      echo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, echo, submessage_arena);
    }
    set_has_echo();
    value_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.echo)
}
void Response::set_allocated_flush(::suil::tmsp::types::ResponseFlush* flush) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (flush) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flush = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, flush, submessage_arena);
    }
    set_has_flush();
    value_.flush_ = flush;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.flush)
}
void Response::set_allocated_info(::suil::tmsp::types::ResponseInfo* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    value_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.info)
}
void Response::set_allocated_set_option(::suil::tmsp::types::ResponseSetOption* set_option) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (set_option) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_option = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, set_option, submessage_arena);
    }
    set_has_set_option();
    value_.set_option_ = set_option;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.set_option)
}
void Response::set_allocated_init_chain(::suil::tmsp::types::ResponseInitChain* init_chain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (init_chain) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init_chain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init_chain, submessage_arena);
    }
    set_has_init_chain();
    value_.init_chain_ = init_chain;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.init_chain)
}
void Response::set_allocated_query(::suil::tmsp::types::ResponseQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    value_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.query)
}
void Response::set_allocated_begin_block(::suil::tmsp::types::ResponseBeginBlock* begin_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (begin_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      begin_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, begin_block, submessage_arena);
    }
    set_has_begin_block();
    value_.begin_block_ = begin_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.begin_block)
}
void Response::set_allocated_check_tx(::suil::tmsp::types::ResponseCheckTx* check_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (check_tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    set_has_check_tx();
    value_.check_tx_ = check_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.check_tx)
}
void Response::set_allocated_deliver_tx(::suil::tmsp::types::ResponseDeliverTx* deliver_tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (deliver_tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deliver_tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    set_has_deliver_tx();
    value_.deliver_tx_ = deliver_tx;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.deliver_tx)
}
void Response::set_allocated_end_block(::suil::tmsp::types::ResponseEndBlock* end_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (end_block) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_block, submessage_arena);
    }
    set_has_end_block();
    value_.end_block_ = end_block;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.end_block)
}
void Response::set_allocated_commit(::suil::tmsp::types::ResponseCommit* commit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (commit) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    value_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:suil.tmsp.types.Response.commit)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kExceptionFieldNumber;
const int Response::kEchoFieldNumber;
const int Response::kFlushFieldNumber;
const int Response::kInfoFieldNumber;
const int Response::kSetOptionFieldNumber;
const int Response::kInitChainFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kBeginBlockFieldNumber;
const int Response::kCheckTxFieldNumber;
const int Response::kDeliverTxFieldNumber;
const int Response::kEndBlockFieldNumber;
const int Response::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::suil::tmsp::types::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Response_types_2eproto.base);
  clear_has_value();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Response_types_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:suil.tmsp.types.Response)
  switch (value_case()) {
    case kException: {
      delete value_.exception_;
      break;
    }
    case kEcho: {
      delete value_.echo_;
      break;
    }
    case kFlush: {
      delete value_.flush_;
      break;
    }
    case kInfo: {
      delete value_.info_;
      break;
    }
    case kSetOption: {
      delete value_.set_option_;
      break;
    }
    case kInitChain: {
      delete value_.init_chain_;
      break;
    }
    case kQuery: {
      delete value_.query_;
      break;
    }
    case kBeginBlock: {
      delete value_.begin_block_;
      break;
    }
    case kCheckTx: {
      delete value_.check_tx_;
      break;
    }
    case kDeliverTx: {
      delete value_.deliver_tx_;
      break;
    }
    case kEndBlock: {
      delete value_.end_block_;
      break;
    }
    case kCommit: {
      delete value_.commit_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.ResponseException exception = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseException::_InternalParse;
        object = msg->mutable_exception();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseEcho echo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseEcho::_InternalParse;
        object = msg->mutable_echo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseFlush flush = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseFlush::_InternalParse;
        object = msg->mutable_flush();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseInfo info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseInfo::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseSetOption set_option = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseSetOption::_InternalParse;
        object = msg->mutable_set_option();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseInitChain init_chain = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseInitChain::_InternalParse;
        object = msg->mutable_init_chain();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseQuery query = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseQuery::_InternalParse;
        object = msg->mutable_query();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseBeginBlock::_InternalParse;
        object = msg->mutable_begin_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseCheckTx::_InternalParse;
        object = msg->mutable_check_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseDeliverTx::_InternalParse;
        object = msg->mutable_deliver_tx();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseEndBlock end_block = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseEndBlock::_InternalParse;
        object = msg->mutable_end_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ResponseCommit commit = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ResponseCommit::_InternalParse;
        object = msg->mutable_commit();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.ResponseException exception = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseEcho echo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_echo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseFlush flush = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_flush()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseInfo info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseSetOption set_option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseInitChain init_chain = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_init_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseQuery query = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_begin_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseEndBlock end_block = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ResponseCommit commit = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.ResponseException exception = 1;
  if (has_exception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::exception(this), output);
  }

  // .suil.tmsp.types.ResponseEcho echo = 2;
  if (has_echo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::echo(this), output);
  }

  // .suil.tmsp.types.ResponseFlush flush = 3;
  if (has_flush()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::flush(this), output);
  }

  // .suil.tmsp.types.ResponseInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::info(this), output);
  }

  // .suil.tmsp.types.ResponseSetOption set_option = 5;
  if (has_set_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::set_option(this), output);
  }

  // .suil.tmsp.types.ResponseInitChain init_chain = 6;
  if (has_init_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, HasBitSetters::init_chain(this), output);
  }

  // .suil.tmsp.types.ResponseQuery query = 7;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, HasBitSetters::query(this), output);
  }

  // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
  if (has_begin_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, HasBitSetters::begin_block(this), output);
  }

  // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
  if (has_check_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, HasBitSetters::check_tx(this), output);
  }

  // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
  if (has_deliver_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, HasBitSetters::deliver_tx(this), output);
  }

  // .suil.tmsp.types.ResponseEndBlock end_block = 11;
  if (has_end_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, HasBitSetters::end_block(this), output);
  }

  // .suil.tmsp.types.ResponseCommit commit = 12;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, HasBitSetters::commit(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Response)
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Response)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .suil.tmsp.types.ResponseException exception = 1;
    case kException: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.exception_);
      break;
    }
    // .suil.tmsp.types.ResponseEcho echo = 2;
    case kEcho: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.echo_);
      break;
    }
    // .suil.tmsp.types.ResponseFlush flush = 3;
    case kFlush: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.flush_);
      break;
    }
    // .suil.tmsp.types.ResponseInfo info = 4;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.info_);
      break;
    }
    // .suil.tmsp.types.ResponseSetOption set_option = 5;
    case kSetOption: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.set_option_);
      break;
    }
    // .suil.tmsp.types.ResponseInitChain init_chain = 6;
    case kInitChain: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.init_chain_);
      break;
    }
    // .suil.tmsp.types.ResponseQuery query = 7;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.query_);
      break;
    }
    // .suil.tmsp.types.ResponseBeginBlock begin_block = 8;
    case kBeginBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.begin_block_);
      break;
    }
    // .suil.tmsp.types.ResponseCheckTx check_tx = 9;
    case kCheckTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.check_tx_);
      break;
    }
    // .suil.tmsp.types.ResponseDeliverTx deliver_tx = 10;
    case kDeliverTx: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.deliver_tx_);
      break;
    }
    // .suil.tmsp.types.ResponseEndBlock end_block = 11;
    case kEndBlock: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.end_block_);
      break;
    }
    // .suil.tmsp.types.ResponseCommit commit = 12;
    case kCommit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.commit_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response*>(&from));
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kException: {
      mutable_exception()->::suil::tmsp::types::ResponseException::MergeFrom(from.exception());
      break;
    }
    case kEcho: {
      mutable_echo()->::suil::tmsp::types::ResponseEcho::MergeFrom(from.echo());
      break;
    }
    case kFlush: {
      mutable_flush()->::suil::tmsp::types::ResponseFlush::MergeFrom(from.flush());
      break;
    }
    case kInfo: {
      mutable_info()->::suil::tmsp::types::ResponseInfo::MergeFrom(from.info());
      break;
    }
    case kSetOption: {
      mutable_set_option()->::suil::tmsp::types::ResponseSetOption::MergeFrom(from.set_option());
      break;
    }
    case kInitChain: {
      mutable_init_chain()->::suil::tmsp::types::ResponseInitChain::MergeFrom(from.init_chain());
      break;
    }
    case kQuery: {
      mutable_query()->::suil::tmsp::types::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kBeginBlock: {
      mutable_begin_block()->::suil::tmsp::types::ResponseBeginBlock::MergeFrom(from.begin_block());
      break;
    }
    case kCheckTx: {
      mutable_check_tx()->::suil::tmsp::types::ResponseCheckTx::MergeFrom(from.check_tx());
      break;
    }
    case kDeliverTx: {
      mutable_deliver_tx()->::suil::tmsp::types::ResponseDeliverTx::MergeFrom(from.deliver_tx());
      break;
    }
    case kEndBlock: {
      mutable_end_block()->::suil::tmsp::types::ResponseEndBlock::MergeFrom(from.end_block());
      break;
    }
    case kCommit: {
      mutable_commit()->::suil::tmsp::types::ResponseCommit::MergeFrom(from.commit());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::std::string Response::GetTypeName() const {
  return "suil.tmsp.types.Response";
}


// ===================================================================

void ResponseException::InitAsDefaultInstance() {
}
class ResponseException::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseException::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseException::ResponseException()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseException)
}
ResponseException::ResponseException(const ResponseException& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseException)
}

void ResponseException::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseException_types_2eproto.base);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseException::~ResponseException() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseException)
  SharedDtor();
}

void ResponseException::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseException::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseException& ResponseException::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseException_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseException::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseException::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseException*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_error();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseException)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseException.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseException)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseException)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseException.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseException)
}

size_t ResponseException::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseException)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 1;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseException::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseException*>(&from));
}

void ResponseException::MergeFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseException)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ResponseException::CopyFrom(const ResponseException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseException::IsInitialized() const {
  return true;
}

void ResponseException::Swap(ResponseException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseException::InternalSwap(ResponseException* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string ResponseException::GetTypeName() const {
  return "suil.tmsp.types.ResponseException";
}


// ===================================================================

void ResponseEcho::InitAsDefaultInstance() {
}
class ResponseEcho::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEcho::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEcho::ResponseEcho()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseEcho)
}
ResponseEcho::ResponseEcho(const ResponseEcho& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseEcho)
}

void ResponseEcho::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseEcho_types_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseEcho::~ResponseEcho() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseEcho)
  SharedDtor();
}

void ResponseEcho::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseEcho::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseEcho& ResponseEcho::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseEcho_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseEcho::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseEcho::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseEcho*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseEcho::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseEcho)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseEcho.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseEcho)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseEcho)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseEcho::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseEcho)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseEcho.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseEcho)
}

size_t ResponseEcho::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseEcho)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseEcho::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseEcho*>(&from));
}

void ResponseEcho::MergeFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseEcho)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void ResponseEcho::CopyFrom(const ResponseEcho& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseEcho)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEcho::IsInitialized() const {
  return true;
}

void ResponseEcho::Swap(ResponseEcho* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEcho::InternalSwap(ResponseEcho* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string ResponseEcho::GetTypeName() const {
  return "suil.tmsp.types.ResponseEcho";
}


// ===================================================================

void ResponseFlush::InitAsDefaultInstance() {
}
class ResponseFlush::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFlush::ResponseFlush()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseFlush)
}
ResponseFlush::ResponseFlush(const ResponseFlush& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseFlush)
}

void ResponseFlush::SharedCtor() {
}

ResponseFlush::~ResponseFlush() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseFlush)
  SharedDtor();
}

void ResponseFlush::SharedDtor() {
}

void ResponseFlush::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseFlush& ResponseFlush::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseFlush_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseFlush::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseFlush::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseFlush*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseFlush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseFlush)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseFlush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseFlush)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseFlush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseFlush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseFlush)
}

size_t ResponseFlush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseFlush)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseFlush::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseFlush*>(&from));
}

void ResponseFlush::MergeFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseFlush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseFlush::CopyFrom(const ResponseFlush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseFlush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFlush::IsInitialized() const {
  return true;
}

void ResponseFlush::Swap(ResponseFlush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFlush::InternalSwap(ResponseFlush* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string ResponseFlush::GetTypeName() const {
  return "suil.tmsp.types.ResponseFlush";
}


// ===================================================================

void ResponseInfo::InitAsDefaultInstance() {
}
class ResponseInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInfo::kDataFieldNumber;
const int ResponseInfo::kVersionFieldNumber;
const int ResponseInfo::kAppVersionFieldNumber;
const int ResponseInfo::kLastBlockHeightFieldNumber;
const int ResponseInfo::kLastBlockAppHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInfo::ResponseInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseInfo)
}
ResponseInfo::ResponseInfo(const ResponseInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_block_app_hash().size() > 0) {
    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  ::memcpy(&app_version_, &from.app_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_block_height_) -
    reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseInfo)
}

void ResponseInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseInfo_types_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_block_height_) -
      reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
}

ResponseInfo::~ResponseInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseInfo)
  SharedDtor();
}

void ResponseInfo::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseInfo& ResponseInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseInfo_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_block_app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_block_height_) -
      reinterpret_cast<char*>(&app_version_)) + sizeof(last_block_height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 app_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_app_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 last_block_height = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_block_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes last_block_app_hash = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_last_block_app_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseInfo.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 app_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_block_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_block_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_block_app_hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_block_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // uint64 app_version = 3;
  if (this->app_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->app_version(), output);
  }

  // int64 last_block_height = 4;
  if (this->last_block_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_block_height(), output);
  }

  // bytes last_block_app_hash = 5;
  if (this->last_block_app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->last_block_app_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseInfo)
}

size_t ResponseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // bytes last_block_app_hash = 5;
  if (this->last_block_app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_block_app_hash());
  }

  // uint64 app_version = 3;
  if (this->app_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->app_version());
  }

  // int64 last_block_height = 4;
  if (this->last_block_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_block_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseInfo*>(&from));
}

void ResponseInfo::MergeFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.last_block_app_hash().size() > 0) {

    last_block_app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_block_app_hash_);
  }
  if (from.app_version() != 0) {
    set_app_version(from.app_version());
  }
  if (from.last_block_height() != 0) {
    set_last_block_height(from.last_block_height());
  }
}

void ResponseInfo::CopyFrom(const ResponseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInfo::IsInitialized() const {
  return true;
}

void ResponseInfo::Swap(ResponseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInfo::InternalSwap(ResponseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_block_app_hash_.Swap(&other->last_block_app_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_version_, other->app_version_);
  swap(last_block_height_, other->last_block_height_);
}

::std::string ResponseInfo::GetTypeName() const {
  return "suil.tmsp.types.ResponseInfo";
}


// ===================================================================

void ResponseSetOption::InitAsDefaultInstance() {
}
class ResponseSetOption::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSetOption::kCodeFieldNumber;
const int ResponseSetOption::kLogFieldNumber;
const int ResponseSetOption::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSetOption::ResponseSetOption()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseSetOption)
}
ResponseSetOption::ResponseSetOption(const ResponseSetOption& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseSetOption)
}

void ResponseSetOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseSetOption_types_2eproto.base);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

ResponseSetOption::~ResponseSetOption() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseSetOption)
  SharedDtor();
}

void ResponseSetOption::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseSetOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseSetOption& ResponseSetOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseSetOption_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseSetOption::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseSetOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseSetOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string log = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_log();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseSetOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseSetOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseSetOption.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseSetOption.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseSetOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseSetOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseSetOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseSetOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseSetOption.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseSetOption)
}

size_t ResponseSetOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseSetOption)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSetOption::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseSetOption*>(&from));
}

void ResponseSetOption::MergeFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseSetOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseSetOption::CopyFrom(const ResponseSetOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseSetOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSetOption::IsInitialized() const {
  return true;
}

void ResponseSetOption::Swap(ResponseSetOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSetOption::InternalSwap(ResponseSetOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  log_.Swap(&other->log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::std::string ResponseSetOption::GetTypeName() const {
  return "suil.tmsp.types.ResponseSetOption";
}


// ===================================================================

void ResponseInitChain::InitAsDefaultInstance() {
  ::suil::tmsp::types::_ResponseInitChain_default_instance_._instance.get_mutable()->consensus_params_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
}
class ResponseInitChain::HasBitSetters {
 public:
  static const ::suil::tmsp::types::ConsensusParams& consensus_params(const ResponseInitChain* msg);
};

const ::suil::tmsp::types::ConsensusParams&
ResponseInitChain::HasBitSetters::consensus_params(const ResponseInitChain* msg) {
  return *msg->consensus_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseInitChain::kConsensusParamsFieldNumber;
const int ResponseInitChain::kValidatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseInitChain::ResponseInitChain()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseInitChain)
}
ResponseInitChain::ResponseInitChain(const ResponseInitChain& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consensus_params()) {
    consensus_params_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseInitChain)
}

void ResponseInitChain::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseInitChain_types_2eproto.base);
  consensus_params_ = nullptr;
}

ResponseInitChain::~ResponseInitChain() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseInitChain)
  SharedDtor();
}

void ResponseInitChain::SharedDtor() {
  if (this != internal_default_instance()) delete consensus_params_;
}

void ResponseInitChain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseInitChain& ResponseInitChain::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseInitChain_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseInitChain::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  if (GetArenaNoVirtual() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseInitChain::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseInitChain*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.ConsensusParams consensus_params = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ConsensusParams::_InternalParse;
        object = msg->mutable_consensus_params();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::ValidatorUpdate::_InternalParse;
          object = msg->add_validators();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseInitChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseInitChain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.ConsensusParams consensus_params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consensus_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_validators()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseInitChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseInitChain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseInitChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseInitChain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.ConsensusParams consensus_params = 1;
  if (this->has_consensus_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::consensus_params(this), output);
  }

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validators_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->validators(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseInitChain)
}

size_t ResponseInitChain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseInitChain)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ValidatorUpdate validators = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->validators_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->validators(static_cast<int>(i)));
    }
  }

  // .suil.tmsp.types.ConsensusParams consensus_params = 1;
  if (this->has_consensus_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseInitChain::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseInitChain*>(&from));
}

void ResponseInitChain::MergeFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseInitChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  if (from.has_consensus_params()) {
    mutable_consensus_params()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_params());
  }
}

void ResponseInitChain::CopyFrom(const ResponseInitChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseInitChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseInitChain::IsInitialized() const {
  return true;
}

void ResponseInitChain::Swap(ResponseInitChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseInitChain::InternalSwap(ResponseInitChain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&validators_)->InternalSwap(CastToBase(&other->validators_));
  swap(consensus_params_, other->consensus_params_);
}

::std::string ResponseInitChain::GetTypeName() const {
  return "suil.tmsp.types.ResponseInitChain";
}


// ===================================================================

void ResponseQuery::InitAsDefaultInstance() {
  ::suil::tmsp::types::_ResponseQuery_default_instance_._instance.get_mutable()->proof_ = const_cast< ::suil::tmsp::types::Proof*>(
      ::suil::tmsp::types::Proof::internal_default_instance());
}
class ResponseQuery::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Proof& proof(const ResponseQuery* msg);
};

const ::suil::tmsp::types::Proof&
ResponseQuery::HasBitSetters::proof(const ResponseQuery* msg) {
  return *msg->proof_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kCodeFieldNumber;
const int ResponseQuery::kLogFieldNumber;
const int ResponseQuery::kInfoFieldNumber;
const int ResponseQuery::kIndexFieldNumber;
const int ResponseQuery::kKeyFieldNumber;
const int ResponseQuery::kValueFieldNumber;
const int ResponseQuery::kProofFieldNumber;
const int ResponseQuery::kHeightFieldNumber;
const int ResponseQuery::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.has_proof()) {
    proof_ = new ::suil::tmsp::types::Proof(*from.proof_);
  } else {
    proof_ = nullptr;
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&index_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseQuery_types_2eproto.base);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(code_));
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void ResponseQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseQuery& ResponseQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseQuery_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && proof_ != nullptr) {
    delete proof_;
  }
  proof_ = nullptr;
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&index_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string log = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_log();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 index = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes key = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes value = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .suil.tmsp.types.Proof proof = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Proof::_InternalParse;
        object = msg->mutable_proof();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 height = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string codespace = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_codespace();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Proof proof = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string codespace = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), static_cast<int>(this->codespace().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseQuery.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->index(), output);
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->key(), output);
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->value(), output);
  }

  // .suil.tmsp.types.Proof proof = 8;
  if (this->has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, HasBitSetters::proof(this), output);
  }

  // int64 height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->height(), output);
  }

  // string codespace = 10;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), static_cast<int>(this->codespace().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseQuery.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->codespace(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseQuery)
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseQuery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // bytes key = 6;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 7;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // string codespace = 10;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // .suil.tmsp.types.Proof proof = 8;
  if (this->has_proof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  // int64 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int64 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQuery::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseQuery*>(&from));
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.has_proof()) {
    mutable_proof()->::suil::tmsp::types::Proof::MergeFrom(from.proof());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  log_.Swap(&other->log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codespace_.Swap(&other->codespace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proof_, other->proof_);
  swap(index_, other->index_);
  swap(height_, other->height_);
  swap(code_, other->code_);
}

::std::string ResponseQuery::GetTypeName() const {
  return "suil.tmsp.types.ResponseQuery";
}


// ===================================================================

void ResponseBeginBlock::InitAsDefaultInstance() {
}
class ResponseBeginBlock::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseBeginBlock::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseBeginBlock::ResponseBeginBlock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseBeginBlock)
}
ResponseBeginBlock::ResponseBeginBlock(const ResponseBeginBlock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseBeginBlock)
}

void ResponseBeginBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseBeginBlock_types_2eproto.base);
}

ResponseBeginBlock::~ResponseBeginBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseBeginBlock)
  SharedDtor();
}

void ResponseBeginBlock::SharedDtor() {
}

void ResponseBeginBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseBeginBlock& ResponseBeginBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseBeginBlock_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseBeginBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseBeginBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseBeginBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .suil.tmsp.types.KVPair tags = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::KVPair::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseBeginBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseBeginBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.KVPair tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseBeginBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseBeginBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseBeginBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseBeginBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.KVPair tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->tags(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseBeginBlock)
}

size_t ResponseBeginBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseBeginBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.KVPair tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseBeginBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseBeginBlock*>(&from));
}

void ResponseBeginBlock::MergeFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseBeginBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
}

void ResponseBeginBlock::CopyFrom(const ResponseBeginBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseBeginBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBeginBlock::IsInitialized() const {
  return true;
}

void ResponseBeginBlock::Swap(ResponseBeginBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseBeginBlock::InternalSwap(ResponseBeginBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
}

::std::string ResponseBeginBlock::GetTypeName() const {
  return "suil.tmsp.types.ResponseBeginBlock";
}


// ===================================================================

void ResponseCheckTx::InitAsDefaultInstance() {
}
class ResponseCheckTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCheckTx::kCodeFieldNumber;
const int ResponseCheckTx::kDataFieldNumber;
const int ResponseCheckTx::kLogFieldNumber;
const int ResponseCheckTx::kInfoFieldNumber;
const int ResponseCheckTx::kGasWantedFieldNumber;
const int ResponseCheckTx::kGasUsedFieldNumber;
const int ResponseCheckTx::kTagsFieldNumber;
const int ResponseCheckTx::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCheckTx::ResponseCheckTx()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseCheckTx)
}
ResponseCheckTx::ResponseCheckTx(const ResponseCheckTx& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseCheckTx)
}

void ResponseCheckTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseCheckTx_types_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
}

ResponseCheckTx::~ResponseCheckTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseCheckTx)
  SharedDtor();
}

void ResponseCheckTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCheckTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseCheckTx& ResponseCheckTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseCheckTx_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseCheckTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseCheckTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseCheckTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string log = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_log();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_gas_wanted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 gas_used = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_gas_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::KVPair::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // string codespace = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_codespace();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseCheckTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseCheckTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string codespace = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), static_cast<int>(this->codespace().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseCheckTx.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseCheckTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseCheckTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseCheckTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseCheckTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->tags(static_cast<int>(i)),
      output);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), static_cast<int>(this->codespace().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseCheckTx.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->codespace(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseCheckTx)
}

size_t ResponseCheckTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseCheckTx)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.KVPair tags = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseCheckTx::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCheckTx*>(&from));
}

void ResponseCheckTx::MergeFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseCheckTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseCheckTx::CopyFrom(const ResponseCheckTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseCheckTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckTx::IsInitialized() const {
  return true;
}

void ResponseCheckTx::Swap(ResponseCheckTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCheckTx::InternalSwap(ResponseCheckTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codespace_.Swap(&other->codespace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gas_wanted_, other->gas_wanted_);
  swap(gas_used_, other->gas_used_);
  swap(code_, other->code_);
}

::std::string ResponseCheckTx::GetTypeName() const {
  return "suil.tmsp.types.ResponseCheckTx";
}


// ===================================================================

void ResponseDeliverTx::InitAsDefaultInstance() {
}
class ResponseDeliverTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseDeliverTx::kCodeFieldNumber;
const int ResponseDeliverTx::kDataFieldNumber;
const int ResponseDeliverTx::kLogFieldNumber;
const int ResponseDeliverTx::kInfoFieldNumber;
const int ResponseDeliverTx::kGasWantedFieldNumber;
const int ResponseDeliverTx::kGasUsedFieldNumber;
const int ResponseDeliverTx::kTagsFieldNumber;
const int ResponseDeliverTx::kCodespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDeliverTx::ResponseDeliverTx()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseDeliverTx)
}
ResponseDeliverTx::ResponseDeliverTx(const ResponseDeliverTx& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log().size() > 0) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.info().size() > 0) {
    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.codespace().size() > 0) {
    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  ::memcpy(&gas_wanted_, &from.gas_wanted_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseDeliverTx)
}

void ResponseDeliverTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseDeliverTx_types_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
}

ResponseDeliverTx::~ResponseDeliverTx() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseDeliverTx)
  SharedDtor();
}

void ResponseDeliverTx::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseDeliverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseDeliverTx& ResponseDeliverTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseDeliverTx_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseDeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  codespace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_wanted_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&gas_wanted_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseDeliverTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseDeliverTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string log = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_log();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string info = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_gas_wanted(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 gas_used = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_gas_used(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::KVPair::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // string codespace = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_codespace();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseDeliverTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseDeliverTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log().data(), static_cast<int>(this->log().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.log"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_wanted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_wanted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 gas_used = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gas_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string codespace = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codespace()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->codespace().data(), static_cast<int>(this->codespace().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ResponseDeliverTx.codespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseDeliverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseDeliverTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseDeliverTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseDeliverTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // string log = 3;
  if (this->log().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log().data(), static_cast<int>(this->log().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log(), output);
  }

  // string info = 4;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->info(), output);
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gas_wanted(), output);
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gas_used(), output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->tags(static_cast<int>(i)),
      output);
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->codespace().data(), static_cast<int>(this->codespace().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ResponseDeliverTx.codespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->codespace(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseDeliverTx)
}

size_t ResponseDeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseDeliverTx)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.KVPair tags = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string log = 3;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log());
  }

  // string info = 4;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  // string codespace = 8;
  if (this->codespace().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->codespace());
  }

  // int64 gas_wanted = 5;
  if (this->gas_wanted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_wanted());
  }

  // int64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gas_used());
  }

  // uint32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDeliverTx::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseDeliverTx*>(&from));
}

void ResponseDeliverTx::MergeFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseDeliverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.log().size() > 0) {

    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.codespace().size() > 0) {

    codespace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codespace_);
  }
  if (from.gas_wanted() != 0) {
    set_gas_wanted(from.gas_wanted());
  }
  if (from.gas_used() != 0) {
    set_gas_used(from.gas_used());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ResponseDeliverTx::CopyFrom(const ResponseDeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseDeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDeliverTx::IsInitialized() const {
  return true;
}

void ResponseDeliverTx::Swap(ResponseDeliverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDeliverTx::InternalSwap(ResponseDeliverTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codespace_.Swap(&other->codespace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gas_wanted_, other->gas_wanted_);
  swap(gas_used_, other->gas_used_);
  swap(code_, other->code_);
}

::std::string ResponseDeliverTx::GetTypeName() const {
  return "suil.tmsp.types.ResponseDeliverTx";
}


// ===================================================================

void ResponseEndBlock::InitAsDefaultInstance() {
  ::suil::tmsp::types::_ResponseEndBlock_default_instance_._instance.get_mutable()->consensus_param_updates_ = const_cast< ::suil::tmsp::types::ConsensusParams*>(
      ::suil::tmsp::types::ConsensusParams::internal_default_instance());
}
class ResponseEndBlock::HasBitSetters {
 public:
  static const ::suil::tmsp::types::ConsensusParams& consensus_param_updates(const ResponseEndBlock* msg);
};

const ::suil::tmsp::types::ConsensusParams&
ResponseEndBlock::HasBitSetters::consensus_param_updates(const ResponseEndBlock* msg) {
  return *msg->consensus_param_updates_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseEndBlock::kValidatorUpdatesFieldNumber;
const int ResponseEndBlock::kConsensusParamUpdatesFieldNumber;
const int ResponseEndBlock::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseEndBlock::ResponseEndBlock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseEndBlock)
}
ResponseEndBlock::ResponseEndBlock(const ResponseEndBlock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      validator_updates_(from.validator_updates_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_consensus_param_updates()) {
    consensus_param_updates_ = new ::suil::tmsp::types::ConsensusParams(*from.consensus_param_updates_);
  } else {
    consensus_param_updates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseEndBlock)
}

void ResponseEndBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseEndBlock_types_2eproto.base);
  consensus_param_updates_ = nullptr;
}

ResponseEndBlock::~ResponseEndBlock() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseEndBlock)
  SharedDtor();
}

void ResponseEndBlock::SharedDtor() {
  if (this != internal_default_instance()) delete consensus_param_updates_;
}

void ResponseEndBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseEndBlock& ResponseEndBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseEndBlock_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseEndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_updates_.Clear();
  tags_.Clear();
  if (GetArenaNoVirtual() == nullptr && consensus_param_updates_ != nullptr) {
    delete consensus_param_updates_;
  }
  consensus_param_updates_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseEndBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseEndBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::ValidatorUpdate::_InternalParse;
          object = msg->add_validator_updates();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ConsensusParams::_InternalParse;
        object = msg->mutable_consensus_param_updates();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .suil.tmsp.types.KVPair tags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::KVPair::_InternalParse;
          object = msg->add_tags();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseEndBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseEndBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_validator_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_consensus_param_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.KVPair tags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseEndBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseEndBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseEndBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseEndBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validator_updates_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->validator_updates(static_cast<int>(i)),
      output);
  }

  // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::consensus_param_updates(this), output);
  }

  // repeated .suil.tmsp.types.KVPair tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tags_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->tags(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseEndBlock)
}

size_t ResponseEndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseEndBlock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.ValidatorUpdate validator_updates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->validator_updates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->validator_updates(static_cast<int>(i)));
    }
  }

  // repeated .suil.tmsp.types.KVPair tags = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tags(static_cast<int>(i)));
    }
  }

  // .suil.tmsp.types.ConsensusParams consensus_param_updates = 2;
  if (this->has_consensus_param_updates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *consensus_param_updates_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseEndBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseEndBlock*>(&from));
}

void ResponseEndBlock::MergeFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseEndBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validator_updates_.MergeFrom(from.validator_updates_);
  tags_.MergeFrom(from.tags_);
  if (from.has_consensus_param_updates()) {
    mutable_consensus_param_updates()->::suil::tmsp::types::ConsensusParams::MergeFrom(from.consensus_param_updates());
  }
}

void ResponseEndBlock::CopyFrom(const ResponseEndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseEndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEndBlock::IsInitialized() const {
  return true;
}

void ResponseEndBlock::Swap(ResponseEndBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseEndBlock::InternalSwap(ResponseEndBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&validator_updates_)->InternalSwap(CastToBase(&other->validator_updates_));
  CastToBase(&tags_)->InternalSwap(CastToBase(&other->tags_));
  swap(consensus_param_updates_, other->consensus_param_updates_);
}

::std::string ResponseEndBlock::GetTypeName() const {
  return "suil.tmsp.types.ResponseEndBlock";
}


// ===================================================================

void ResponseCommit::InitAsDefaultInstance() {
}
class ResponseCommit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCommit::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCommit::ResponseCommit()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ResponseCommit)
}
ResponseCommit::ResponseCommit(const ResponseCommit& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ResponseCommit)
}

void ResponseCommit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResponseCommit_types_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseCommit::~ResponseCommit() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ResponseCommit)
  SharedDtor();
}

void ResponseCommit::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseCommit& ResponseCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResponseCommit_types_2eproto.base);
  return *internal_default_instance();
}


void ResponseCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ResponseCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseCommit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResponseCommit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ResponseCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ResponseCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ResponseCommit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ResponseCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ResponseCommit)
}

size_t ResponseCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ResponseCommit)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseCommit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResponseCommit*>(&from));
}

void ResponseCommit::MergeFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ResponseCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ResponseCommit::CopyFrom(const ResponseCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ResponseCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommit::IsInitialized() const {
  return true;
}

void ResponseCommit::Swap(ResponseCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCommit::InternalSwap(ResponseCommit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string ResponseCommit::GetTypeName() const {
  return "suil.tmsp.types.ResponseCommit";
}


// ===================================================================

void ConsensusParams::InitAsDefaultInstance() {
  ::suil::tmsp::types::_ConsensusParams_default_instance_._instance.get_mutable()->block_size_ = const_cast< ::suil::tmsp::types::BlockSizeParams*>(
      ::suil::tmsp::types::BlockSizeParams::internal_default_instance());
  ::suil::tmsp::types::_ConsensusParams_default_instance_._instance.get_mutable()->evidence_ = const_cast< ::suil::tmsp::types::EvidenceParams*>(
      ::suil::tmsp::types::EvidenceParams::internal_default_instance());
  ::suil::tmsp::types::_ConsensusParams_default_instance_._instance.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::ValidatorParams*>(
      ::suil::tmsp::types::ValidatorParams::internal_default_instance());
}
class ConsensusParams::HasBitSetters {
 public:
  static const ::suil::tmsp::types::BlockSizeParams& block_size(const ConsensusParams* msg);
  static const ::suil::tmsp::types::EvidenceParams& evidence(const ConsensusParams* msg);
  static const ::suil::tmsp::types::ValidatorParams& validator(const ConsensusParams* msg);
};

const ::suil::tmsp::types::BlockSizeParams&
ConsensusParams::HasBitSetters::block_size(const ConsensusParams* msg) {
  return *msg->block_size_;
}
const ::suil::tmsp::types::EvidenceParams&
ConsensusParams::HasBitSetters::evidence(const ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::suil::tmsp::types::ValidatorParams&
ConsensusParams::HasBitSetters::validator(const ConsensusParams* msg) {
  return *msg->validator_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusParams::kBlockSizeFieldNumber;
const int ConsensusParams::kEvidenceFieldNumber;
const int ConsensusParams::kValidatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusParams::ConsensusParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ConsensusParams)
}
ConsensusParams::ConsensusParams(const ConsensusParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_size()) {
    block_size_ = new ::suil::tmsp::types::BlockSizeParams(*from.block_size_);
  } else {
    block_size_ = nullptr;
  }
  if (from.has_evidence()) {
    evidence_ = new ::suil::tmsp::types::EvidenceParams(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::ValidatorParams(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ConsensusParams)
}

void ConsensusParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConsensusParams_types_2eproto.base);
  ::memset(&block_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) -
      reinterpret_cast<char*>(&block_size_)) + sizeof(validator_));
}

ConsensusParams::~ConsensusParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ConsensusParams)
  SharedDtor();
}

void ConsensusParams::SharedDtor() {
  if (this != internal_default_instance()) delete block_size_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
}

void ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusParams& ConsensusParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConsensusParams_types_2eproto.base);
  return *internal_default_instance();
}


void ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ConsensusParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && block_size_ != nullptr) {
    delete block_size_;
  }
  block_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConsensusParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConsensusParams*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.BlockSizeParams block_size = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::BlockSizeParams::_InternalParse;
        object = msg->mutable_block_size();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.EvidenceParams evidence = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::EvidenceParams::_InternalParse;
        object = msg->mutable_evidence();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .suil.tmsp.types.ValidatorParams validator = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::ValidatorParams::_InternalParse;
        object = msg->mutable_validator();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConsensusParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ConsensusParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.BlockSizeParams block_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.EvidenceParams evidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_evidence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.ValidatorParams validator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ConsensusParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ConsensusParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConsensusParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ConsensusParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.BlockSizeParams block_size = 1;
  if (this->has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::block_size(this), output);
  }

  // .suil.tmsp.types.EvidenceParams evidence = 2;
  if (this->has_evidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::evidence(this), output);
  }

  // .suil.tmsp.types.ValidatorParams validator = 3;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::validator(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ConsensusParams)
}

size_t ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ConsensusParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .suil.tmsp.types.BlockSizeParams block_size = 1;
  if (this->has_block_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_size_);
  }

  // .suil.tmsp.types.EvidenceParams evidence = 2;
  if (this->has_evidence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .suil.tmsp.types.ValidatorParams validator = 3;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConsensusParams*>(&from));
}

void ConsensusParams::MergeFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block_size()) {
    mutable_block_size()->::suil::tmsp::types::BlockSizeParams::MergeFrom(from.block_size());
  }
  if (from.has_evidence()) {
    mutable_evidence()->::suil::tmsp::types::EvidenceParams::MergeFrom(from.evidence());
  }
  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::ValidatorParams::MergeFrom(from.validator());
  }
}

void ConsensusParams::CopyFrom(const ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusParams::IsInitialized() const {
  return true;
}

void ConsensusParams::Swap(ConsensusParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusParams::InternalSwap(ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_size_, other->block_size_);
  swap(evidence_, other->evidence_);
  swap(validator_, other->validator_);
}

::std::string ConsensusParams::GetTypeName() const {
  return "suil.tmsp.types.ConsensusParams";
}


// ===================================================================

void BlockSizeParams::InitAsDefaultInstance() {
}
class BlockSizeParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockSizeParams::kMaxBytesFieldNumber;
const int BlockSizeParams::kMaxGasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockSizeParams::BlockSizeParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.BlockSizeParams)
}
BlockSizeParams::BlockSizeParams(const BlockSizeParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.BlockSizeParams)
}

void BlockSizeParams::SharedCtor() {
  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
}

BlockSizeParams::~BlockSizeParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.BlockSizeParams)
  SharedDtor();
}

void BlockSizeParams::SharedDtor() {
}

void BlockSizeParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockSizeParams& BlockSizeParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockSizeParams_types_2eproto.base);
  return *internal_default_instance();
}


void BlockSizeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.BlockSizeParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_gas_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(max_gas_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockSizeParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockSizeParams*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 max_bytes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 max_gas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_gas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockSizeParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.BlockSizeParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_bytes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 max_gas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.BlockSizeParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.BlockSizeParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockSizeParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.BlockSizeParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->max_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_bytes(), output);
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_gas(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.BlockSizeParams)
}

size_t BlockSizeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.BlockSizeParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1;
  if (this->max_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_bytes());
  }

  // int64 max_gas = 2;
  if (this->max_gas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_gas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockSizeParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockSizeParams*>(&from));
}

void BlockSizeParams::MergeFrom(const BlockSizeParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.BlockSizeParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_bytes() != 0) {
    set_max_bytes(from.max_bytes());
  }
  if (from.max_gas() != 0) {
    set_max_gas(from.max_gas());
  }
}

void BlockSizeParams::CopyFrom(const BlockSizeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.BlockSizeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSizeParams::IsInitialized() const {
  return true;
}

void BlockSizeParams::Swap(BlockSizeParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockSizeParams::InternalSwap(BlockSizeParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_bytes_, other->max_bytes_);
  swap(max_gas_, other->max_gas_);
}

::std::string BlockSizeParams::GetTypeName() const {
  return "suil.tmsp.types.BlockSizeParams";
}


// ===================================================================

void EvidenceParams::InitAsDefaultInstance() {
}
class EvidenceParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvidenceParams::kMaxAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvidenceParams::EvidenceParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.EvidenceParams)
}
EvidenceParams::EvidenceParams(const EvidenceParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_age_ = from.max_age_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.EvidenceParams)
}

void EvidenceParams::SharedCtor() {
  max_age_ = PROTOBUF_LONGLONG(0);
}

EvidenceParams::~EvidenceParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.EvidenceParams)
  SharedDtor();
}

void EvidenceParams::SharedDtor() {
}

void EvidenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EvidenceParams& EvidenceParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EvidenceParams_types_2eproto.base);
  return *internal_default_instance();
}


void EvidenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.EvidenceParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_age_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EvidenceParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EvidenceParams*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 max_age = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_age(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EvidenceParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.EvidenceParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 max_age = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.EvidenceParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.EvidenceParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EvidenceParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.EvidenceParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_age = 1;
  if (this->max_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_age(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.EvidenceParams)
}

size_t EvidenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.EvidenceParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_age = 1;
  if (this->max_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvidenceParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EvidenceParams*>(&from));
}

void EvidenceParams::MergeFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.EvidenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_age() != 0) {
    set_max_age(from.max_age());
  }
}

void EvidenceParams::CopyFrom(const EvidenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.EvidenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceParams::IsInitialized() const {
  return true;
}

void EvidenceParams::Swap(EvidenceParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvidenceParams::InternalSwap(EvidenceParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_age_, other->max_age_);
}

::std::string EvidenceParams::GetTypeName() const {
  return "suil.tmsp.types.EvidenceParams";
}


// ===================================================================

void ValidatorParams::InitAsDefaultInstance() {
}
class ValidatorParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidatorParams::kPubKeyTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidatorParams::ValidatorParams()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ValidatorParams)
}
ValidatorParams::ValidatorParams(const ValidatorParams& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      pub_key_types_(from.pub_key_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ValidatorParams)
}

void ValidatorParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ValidatorParams_types_2eproto.base);
}

ValidatorParams::~ValidatorParams() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ValidatorParams)
  SharedDtor();
}

void ValidatorParams::SharedDtor() {
}

void ValidatorParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorParams& ValidatorParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ValidatorParams_types_2eproto.base);
  return *internal_default_instance();
}


void ValidatorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ValidatorParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_types_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValidatorParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValidatorParams*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string pub_key_types = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName(nullptr);
          object = msg->add_pub_key_types();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValidatorParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ValidatorParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pub_key_types = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pub_key_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pub_key_types(this->pub_key_types_size() - 1).data(),
            static_cast<int>(this->pub_key_types(this->pub_key_types_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.ValidatorParams.pub_key_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ValidatorParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ValidatorParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValidatorParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ValidatorParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  for (int i = 0, n = this->pub_key_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pub_key_types(i).data(), static_cast<int>(this->pub_key_types(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.ValidatorParams.pub_key_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pub_key_types(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ValidatorParams)
}

size_t ValidatorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ValidatorParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pub_key_types = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pub_key_types_size());
  for (int i = 0, n = this->pub_key_types_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pub_key_types(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorParams::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ValidatorParams*>(&from));
}

void ValidatorParams::MergeFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ValidatorParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pub_key_types_.MergeFrom(from.pub_key_types_);
}

void ValidatorParams::CopyFrom(const ValidatorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ValidatorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorParams::IsInitialized() const {
  return true;
}

void ValidatorParams::Swap(ValidatorParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidatorParams::InternalSwap(ValidatorParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pub_key_types_.InternalSwap(CastToBase(&other->pub_key_types_));
}

::std::string ValidatorParams::GetTypeName() const {
  return "suil.tmsp.types.ValidatorParams";
}


// ===================================================================

void LastCommitInfo::InitAsDefaultInstance() {
}
class LastCommitInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LastCommitInfo::kRoundFieldNumber;
const int LastCommitInfo::kVotesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LastCommitInfo::LastCommitInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.LastCommitInfo)
}
LastCommitInfo::LastCommitInfo(const LastCommitInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.LastCommitInfo)
}

void LastCommitInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LastCommitInfo_types_2eproto.base);
  round_ = 0;
}

LastCommitInfo::~LastCommitInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.LastCommitInfo)
  SharedDtor();
}

void LastCommitInfo::SharedDtor() {
}

void LastCommitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LastCommitInfo& LastCommitInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LastCommitInfo_types_2eproto.base);
  return *internal_default_instance();
}


void LastCommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.LastCommitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  round_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LastCommitInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LastCommitInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 round = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .suil.tmsp.types.VoteInfo votes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::suil::tmsp::types::VoteInfo::_InternalParse;
          object = msg->add_votes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LastCommitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.LastCommitInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 round = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .suil.tmsp.types.VoteInfo votes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.LastCommitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.LastCommitInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LastCommitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.LastCommitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 round = 1;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->round(), output);
  }

  // repeated .suil.tmsp.types.VoteInfo votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->votes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.LastCommitInfo)
}

size_t LastCommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.LastCommitInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .suil.tmsp.types.VoteInfo votes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->votes(static_cast<int>(i)));
    }
  }

  // int32 round = 1;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LastCommitInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LastCommitInfo*>(&from));
}

void LastCommitInfo::MergeFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.LastCommitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void LastCommitInfo::CopyFrom(const LastCommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.LastCommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastCommitInfo::IsInitialized() const {
  return true;
}

void LastCommitInfo::Swap(LastCommitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LastCommitInfo::InternalSwap(LastCommitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&votes_)->InternalSwap(CastToBase(&other->votes_));
  swap(round_, other->round_);
}

::std::string LastCommitInfo::GetTypeName() const {
  return "suil.tmsp.types.LastCommitInfo";
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::suil::tmsp::types::_Header_default_instance_._instance.get_mutable()->version_ = const_cast< ::suil::tmsp::types::Version*>(
      ::suil::tmsp::types::Version::internal_default_instance());
  ::suil::tmsp::types::_Header_default_instance_._instance.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
  ::suil::tmsp::types::_Header_default_instance_._instance.get_mutable()->last_block_id_ = const_cast< ::suil::tmsp::types::BlockID*>(
      ::suil::tmsp::types::BlockID::internal_default_instance());
}
class Header::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Version& version(const Header* msg);
  static const ::suil::tmsp::types::Timestamp& time(const Header* msg);
  static const ::suil::tmsp::types::BlockID& last_block_id(const Header* msg);
};

const ::suil::tmsp::types::Version&
Header::HasBitSetters::version(const Header* msg) {
  return *msg->version_;
}
const ::suil::tmsp::types::Timestamp&
Header::HasBitSetters::time(const Header* msg) {
  return *msg->time_;
}
const ::suil::tmsp::types::BlockID&
Header::HasBitSetters::last_block_id(const Header* msg) {
  return *msg->last_block_id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kChainIdFieldNumber;
const int Header::kHeightFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kNumTxsFieldNumber;
const int Header::kTotalTxsFieldNumber;
const int Header::kLastBlockIdFieldNumber;
const int Header::kLastCommitHashFieldNumber;
const int Header::kDataHashFieldNumber;
const int Header::kValidatorsHashFieldNumber;
const int Header::kNextValidatorsHashFieldNumber;
const int Header::kConsensusHashFieldNumber;
const int Header::kAppHashFieldNumber;
const int Header::kLastResultsHashFieldNumber;
const int Header::kEvidenceHashFieldNumber;
const int Header::kProposerAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chain_id().size() > 0) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_commit_hash().size() > 0) {
    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data_hash().size() > 0) {
    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.validators_hash().size() > 0) {
    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  next_validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_validators_hash().size() > 0) {
    next_validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_validators_hash_);
  }
  consensus_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consensus_hash().size() > 0) {
    consensus_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consensus_hash_);
  }
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_hash().size() > 0) {
    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  last_results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_results_hash().size() > 0) {
    last_results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_results_hash_);
  }
  evidence_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.evidence_hash().size() > 0) {
    evidence_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evidence_hash_);
  }
  proposer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposer_address().size() > 0) {
    proposer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.has_version()) {
    version_ = new ::suil::tmsp::types::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from.has_last_block_id()) {
    last_block_id_ = new ::suil::tmsp::types::BlockID(*from.last_block_id_);
  } else {
    last_block_id_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_txs_) -
    reinterpret_cast<char*>(&height_)) + sizeof(total_txs_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Header_types_2eproto.base);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_txs_) -
      reinterpret_cast<char*>(&version_)) + sizeof(total_txs_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete last_block_id_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Header_types_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_commit_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_validators_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consensus_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_results_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evidence_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_block_id_ != nullptr) {
    delete last_block_id_;
  }
  last_block_id_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_txs_) -
      reinterpret_cast<char*>(&height_)) + sizeof(total_txs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Header::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Header*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.Version version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Version::_InternalParse;
        object = msg->mutable_version();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string chain_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_chain_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 num_txs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_num_txs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 total_txs = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_total_txs(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .suil.tmsp.types.BlockID last_block_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::BlockID::_InternalParse;
        object = msg->mutable_last_block_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes last_commit_hash = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_last_commit_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes data_hash = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes validators_hash = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_validators_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes next_validators_hash = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_next_validators_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes consensus_hash = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_consensus_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes app_hash = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_app_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes last_results_hash = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_last_results_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes evidence_hash = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_evidence_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes proposer_address = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_proposer_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Version version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_id().data(), static_cast<int>(this->chain_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_txs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_txs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_txs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.BlockID last_block_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_block_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_commit_hash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_commit_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes validators_hash = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_validators_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes next_validators_hash = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_next_validators_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes consensus_hash = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_consensus_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes app_hash = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes last_results_hash = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_last_results_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes evidence_hash = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_evidence_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proposer_address = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Header)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.Version version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::version(this), output);
  }

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Header.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chain_id(), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::time(this), output);
  }

  // int64 num_txs = 5;
  if (this->num_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_txs(), output);
  }

  // int64 total_txs = 6;
  if (this->total_txs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_txs(), output);
  }

  // .suil.tmsp.types.BlockID last_block_id = 7;
  if (this->has_last_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, HasBitSetters::last_block_id(this), output);
  }

  // bytes last_commit_hash = 8;
  if (this->last_commit_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->last_commit_hash(), output);
  }

  // bytes data_hash = 9;
  if (this->data_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->data_hash(), output);
  }

  // bytes validators_hash = 10;
  if (this->validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->validators_hash(), output);
  }

  // bytes next_validators_hash = 11;
  if (this->next_validators_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->next_validators_hash(), output);
  }

  // bytes consensus_hash = 12;
  if (this->consensus_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->consensus_hash(), output);
  }

  // bytes app_hash = 13;
  if (this->app_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->app_hash(), output);
  }

  // bytes last_results_hash = 14;
  if (this->last_results_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->last_results_hash(), output);
  }

  // bytes evidence_hash = 15;
  if (this->evidence_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->evidence_hash(), output);
  }

  // bytes proposer_address = 16;
  if (this->proposer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->proposer_address(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Header)
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Header)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_id());
  }

  // bytes last_commit_hash = 8;
  if (this->last_commit_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_commit_hash());
  }

  // bytes data_hash = 9;
  if (this->data_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_hash());
  }

  // bytes validators_hash = 10;
  if (this->validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->validators_hash());
  }

  // bytes next_validators_hash = 11;
  if (this->next_validators_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->next_validators_hash());
  }

  // bytes consensus_hash = 12;
  if (this->consensus_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->consensus_hash());
  }

  // bytes app_hash = 13;
  if (this->app_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->app_hash());
  }

  // bytes last_results_hash = 14;
  if (this->last_results_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->last_results_hash());
  }

  // bytes evidence_hash = 15;
  if (this->evidence_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->evidence_hash());
  }

  // bytes proposer_address = 16;
  if (this->proposer_address().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proposer_address());
  }

  // .suil.tmsp.types.Version version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .suil.tmsp.types.BlockID last_block_id = 7;
  if (this->has_last_block_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_block_id_);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 num_txs = 5;
  if (this->num_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_txs());
  }

  // int64 total_txs = 6;
  if (this->total_txs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_txs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Header*>(&from));
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {

    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  if (from.last_commit_hash().size() > 0) {

    last_commit_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_commit_hash_);
  }
  if (from.data_hash().size() > 0) {

    data_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_hash_);
  }
  if (from.validators_hash().size() > 0) {

    validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.validators_hash_);
  }
  if (from.next_validators_hash().size() > 0) {

    next_validators_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_validators_hash_);
  }
  if (from.consensus_hash().size() > 0) {

    consensus_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consensus_hash_);
  }
  if (from.app_hash().size() > 0) {

    app_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_hash_);
  }
  if (from.last_results_hash().size() > 0) {

    last_results_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_results_hash_);
  }
  if (from.evidence_hash().size() > 0) {

    evidence_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.evidence_hash_);
  }
  if (from.proposer_address().size() > 0) {

    proposer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.has_version()) {
    mutable_version()->::suil::tmsp::types::Version::MergeFrom(from.version());
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.has_last_block_id()) {
    mutable_last_block_id()->::suil::tmsp::types::BlockID::MergeFrom(from.last_block_id());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.num_txs() != 0) {
    set_num_txs(from.num_txs());
  }
  if (from.total_txs() != 0) {
    set_total_txs(from.total_txs());
  }
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_commit_hash_.Swap(&other->last_commit_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_hash_.Swap(&other->data_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  validators_hash_.Swap(&other->validators_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  next_validators_hash_.Swap(&other->next_validators_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consensus_hash_.Swap(&other->consensus_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  app_hash_.Swap(&other->app_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_results_hash_.Swap(&other->last_results_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  evidence_hash_.Swap(&other->evidence_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proposer_address_.Swap(&other->proposer_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(time_, other->time_);
  swap(last_block_id_, other->last_block_id_);
  swap(height_, other->height_);
  swap(num_txs_, other->num_txs_);
  swap(total_txs_, other->total_txs_);
}

::std::string Header::GetTypeName() const {
  return "suil.tmsp.types.Header";
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kBlockFieldNumber;
const int Version::kAppFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_, &from.block_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_) -
    reinterpret_cast<char*>(&block_)) + sizeof(app_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Version)
}

void Version::SharedCtor() {
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&block_)) + sizeof(app_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Version)
  SharedDtor();
}

void Version::SharedDtor() {
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Version_types_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_) -
      reinterpret_cast<char*>(&block_)) + sizeof(app_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Version::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Version*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 Block = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_block(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 App = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_app(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 Block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 App = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Version)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Block = 1;
  if (this->block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->block(), output);
  }

  // uint64 App = 2;
  if (this->app() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->app(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Version)
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Version)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Block = 1;
  if (this->block() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->block());
  }

  // uint64 App = 2;
  if (this->app() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->app());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Version*>(&from));
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block() != 0) {
    set_block(from.block());
  }
  if (from.app() != 0) {
    set_app(from.app());
  }
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(block_, other->block_);
  swap(app_, other->app_);
}

::std::string Version::GetTypeName() const {
  return "suil.tmsp.types.Version";
}


// ===================================================================

void BlockID::InitAsDefaultInstance() {
  ::suil::tmsp::types::_BlockID_default_instance_._instance.get_mutable()->parts_header_ = const_cast< ::suil::tmsp::types::PartSetHeader*>(
      ::suil::tmsp::types::PartSetHeader::internal_default_instance());
}
class BlockID::HasBitSetters {
 public:
  static const ::suil::tmsp::types::PartSetHeader& parts_header(const BlockID* msg);
};

const ::suil::tmsp::types::PartSetHeader&
BlockID::HasBitSetters::parts_header(const BlockID* msg) {
  return *msg->parts_header_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockID::kHashFieldNumber;
const int BlockID::kPartsHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockID::BlockID()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts_header()) {
    parts_header_ = new ::suil::tmsp::types::PartSetHeader(*from.parts_header_);
  } else {
    parts_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.BlockID)
}

void BlockID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BlockID_types_2eproto.base);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parts_header_ = nullptr;
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.BlockID)
  SharedDtor();
}

void BlockID::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parts_header_;
}

void BlockID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockID& BlockID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockID_types_2eproto.base);
  return *internal_default_instance();
}


void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && parts_header_ != nullptr) {
    delete parts_header_;
  }
  parts_header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .suil.tmsp.types.PartSetHeader parts_header = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::PartSetHeader::_InternalParse;
        object = msg->mutable_parts_header();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.BlockID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.PartSetHeader parts_header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parts_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.BlockID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.BlockID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.BlockID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .suil.tmsp.types.PartSetHeader parts_header = 2;
  if (this->has_parts_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::parts_header(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.BlockID)
}

size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.BlockID)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .suil.tmsp.types.PartSetHeader parts_header = 2;
  if (this->has_parts_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parts_header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockID*>(&from));
}

void BlockID::MergeFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.BlockID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_parts_header()) {
    mutable_parts_header()->::suil::tmsp::types::PartSetHeader::MergeFrom(from.parts_header());
  }
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::Swap(BlockID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockID::InternalSwap(BlockID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parts_header_, other->parts_header_);
}

::std::string BlockID::GetTypeName() const {
  return "suil.tmsp.types.BlockID";
}


// ===================================================================

void PartSetHeader::InitAsDefaultInstance() {
}
class PartSetHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartSetHeader::kTotalFieldNumber;
const int PartSetHeader::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartSetHeader::PartSetHeader()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.PartSetHeader)
}
PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.PartSetHeader)
}

void PartSetHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PartSetHeader_types_2eproto.base);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.PartSetHeader)
  SharedDtor();
}

void PartSetHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartSetHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartSetHeader& PartSetHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PartSetHeader_types_2eproto.base);
  return *internal_default_instance();
}


void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.PartSetHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PartSetHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PartSetHeader*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 total = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_total(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes hash = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PartSetHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.PartSetHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.PartSetHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.PartSetHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PartSetHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.PartSetHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.PartSetHeader)
}

size_t PartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.PartSetHeader)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartSetHeader::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PartSetHeader*>(&from));
}

void PartSetHeader::MergeFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.PartSetHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.total() != 0) {
    set_total(from.total());
  }
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {
  return true;
}

void PartSetHeader::Swap(PartSetHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartSetHeader::InternalSwap(PartSetHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
}

::std::string PartSetHeader::GetTypeName() const {
  return "suil.tmsp.types.PartSetHeader";
}


// ===================================================================

void Validator::InitAsDefaultInstance() {
}
class Validator::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Validator::kAddressFieldNumber;
const int Validator::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Validator::Validator()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Validator)
}
Validator::Validator(const Validator& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Validator)
}

void Validator::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Validator_types_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = PROTOBUF_LONGLONG(0);
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Validator)
  SharedDtor();
}

void Validator::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Validator& Validator::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Validator_types_2eproto.base);
  return *internal_default_instance();
}


void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Validator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Validator::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Validator*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 power = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_power(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Validator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Validator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 power = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Validator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Validator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Validator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Validator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // int64 power = 3;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->power(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Validator)
}

size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Validator)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // int64 power = 3;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Validator::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Validator*>(&from));
}

void Validator::MergeFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::Swap(Validator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Validator::InternalSwap(Validator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(power_, other->power_);
}

::std::string Validator::GetTypeName() const {
  return "suil.tmsp.types.Validator";
}


// ===================================================================

void ValidatorUpdate::InitAsDefaultInstance() {
  ::suil::tmsp::types::_ValidatorUpdate_default_instance_._instance.get_mutable()->pub_key_ = const_cast< ::suil::tmsp::types::PubKey*>(
      ::suil::tmsp::types::PubKey::internal_default_instance());
}
class ValidatorUpdate::HasBitSetters {
 public:
  static const ::suil::tmsp::types::PubKey& pub_key(const ValidatorUpdate* msg);
};

const ::suil::tmsp::types::PubKey&
ValidatorUpdate::HasBitSetters::pub_key(const ValidatorUpdate* msg) {
  return *msg->pub_key_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ValidatorUpdate::kPubKeyFieldNumber;
const int ValidatorUpdate::kPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ValidatorUpdate::ValidatorUpdate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.ValidatorUpdate)
}
ValidatorUpdate::ValidatorUpdate(const ValidatorUpdate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pub_key()) {
    pub_key_ = new ::suil::tmsp::types::PubKey(*from.pub_key_);
  } else {
    pub_key_ = nullptr;
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.ValidatorUpdate)
}

void ValidatorUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ValidatorUpdate_types_2eproto.base);
  ::memset(&pub_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_) -
      reinterpret_cast<char*>(&pub_key_)) + sizeof(power_));
}

ValidatorUpdate::~ValidatorUpdate() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.ValidatorUpdate)
  SharedDtor();
}

void ValidatorUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete pub_key_;
}

void ValidatorUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidatorUpdate& ValidatorUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ValidatorUpdate_types_2eproto.base);
  return *internal_default_instance();
}


void ValidatorUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.ValidatorUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pub_key_ != nullptr) {
    delete pub_key_;
  }
  pub_key_ = nullptr;
  power_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValidatorUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ValidatorUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.PubKey pub_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::PubKey::_InternalParse;
        object = msg->mutable_pub_key();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 power = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_power(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValidatorUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.ValidatorUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.PubKey pub_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pub_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 power = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.ValidatorUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.ValidatorUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValidatorUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.ValidatorUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.PubKey pub_key = 1;
  if (this->has_pub_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::pub_key(this), output);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->power(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.ValidatorUpdate)
}

size_t ValidatorUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.ValidatorUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .suil.tmsp.types.PubKey pub_key = 1;
  if (this->has_pub_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pub_key_);
  }

  // int64 power = 2;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidatorUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ValidatorUpdate*>(&from));
}

void ValidatorUpdate::MergeFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.ValidatorUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pub_key()) {
    mutable_pub_key()->::suil::tmsp::types::PubKey::MergeFrom(from.pub_key());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void ValidatorUpdate::CopyFrom(const ValidatorUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.ValidatorUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdate::IsInitialized() const {
  return true;
}

void ValidatorUpdate::Swap(ValidatorUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ValidatorUpdate::InternalSwap(ValidatorUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pub_key_, other->pub_key_);
  swap(power_, other->power_);
}

::std::string ValidatorUpdate::GetTypeName() const {
  return "suil.tmsp.types.ValidatorUpdate";
}


// ===================================================================

void VoteInfo::InitAsDefaultInstance() {
  ::suil::tmsp::types::_VoteInfo_default_instance_._instance.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::Validator*>(
      ::suil::tmsp::types::Validator::internal_default_instance());
}
class VoteInfo::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Validator& validator(const VoteInfo* msg);
};

const ::suil::tmsp::types::Validator&
VoteInfo::HasBitSetters::validator(const VoteInfo* msg) {
  return *msg->validator_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteInfo::kValidatorFieldNumber;
const int VoteInfo::kSignedLastBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteInfo::VoteInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.VoteInfo)
}
VoteInfo::VoteInfo(const VoteInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  signed_last_block_ = from.signed_last_block_;
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.VoteInfo)
}

void VoteInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_VoteInfo_types_2eproto.base);
  ::memset(&validator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signed_last_block_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(signed_last_block_));
}

VoteInfo::~VoteInfo() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.VoteInfo)
  SharedDtor();
}

void VoteInfo::SharedDtor() {
  if (this != internal_default_instance()) delete validator_;
}

void VoteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteInfo& VoteInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_VoteInfo_types_2eproto.base);
  return *internal_default_instance();
}


void VoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.VoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  signed_last_block_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<VoteInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .suil.tmsp.types.Validator validator = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Validator::_InternalParse;
        object = msg->mutable_validator();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool signed_last_block = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_signed_last_block(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.VoteInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .suil.tmsp.types.Validator validator = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool signed_last_block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &signed_last_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.VoteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.VoteInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.VoteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .suil.tmsp.types.Validator validator = 1;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::validator(this), output);
  }

  // bool signed_last_block = 2;
  if (this->signed_last_block() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->signed_last_block(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.VoteInfo)
}

size_t VoteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.VoteInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .suil.tmsp.types.Validator validator = 1;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // bool signed_last_block = 2;
  if (this->signed_last_block() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VoteInfo*>(&from));
}

void VoteInfo::MergeFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.VoteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::Validator::MergeFrom(from.validator());
  }
  if (from.signed_last_block() != 0) {
    set_signed_last_block(from.signed_last_block());
  }
}

void VoteInfo::CopyFrom(const VoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.VoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteInfo::IsInitialized() const {
  return true;
}

void VoteInfo::Swap(VoteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteInfo::InternalSwap(VoteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(validator_, other->validator_);
  swap(signed_last_block_, other->signed_last_block_);
}

::std::string VoteInfo::GetTypeName() const {
  return "suil.tmsp.types.VoteInfo";
}


// ===================================================================

void PubKey::InitAsDefaultInstance() {
}
class PubKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubKey::kTypeFieldNumber;
const int PubKey::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubKey::PubKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.PubKey)
}
PubKey::PubKey(const PubKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.PubKey)
}

void PubKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PubKey_types_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PubKey::~PubKey() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.PubKey)
  SharedDtor();
}

void PubKey::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PubKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PubKey& PubKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PubKey_types_2eproto.base);
  return *internal_default_instance();
}


void PubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.PubKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PubKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PubKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PubKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.PubKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.PubKey.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.PubKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.PubKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PubKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.PubKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.PubKey.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.PubKey)
}

size_t PubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.PubKey)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PubKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PubKey*>(&from));
}

void PubKey::MergeFrom(const PubKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.PubKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void PubKey::CopyFrom(const PubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.PubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKey::IsInitialized() const {
  return true;
}

void PubKey::Swap(PubKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PubKey::InternalSwap(PubKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string PubKey::GetTypeName() const {
  return "suil.tmsp.types.PubKey";
}


// ===================================================================

void Evidence::InitAsDefaultInstance() {
  ::suil::tmsp::types::_Evidence_default_instance_._instance.get_mutable()->validator_ = const_cast< ::suil::tmsp::types::Validator*>(
      ::suil::tmsp::types::Validator::internal_default_instance());
  ::suil::tmsp::types::_Evidence_default_instance_._instance.get_mutable()->time_ = const_cast< ::suil::tmsp::types::Timestamp*>(
      ::suil::tmsp::types::Timestamp::internal_default_instance());
}
class Evidence::HasBitSetters {
 public:
  static const ::suil::tmsp::types::Validator& validator(const Evidence* msg);
  static const ::suil::tmsp::types::Timestamp& time(const Evidence* msg);
};

const ::suil::tmsp::types::Validator&
Evidence::HasBitSetters::validator(const Evidence* msg) {
  return *msg->validator_;
}
const ::suil::tmsp::types::Timestamp&
Evidence::HasBitSetters::time(const Evidence* msg) {
  return *msg->time_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Evidence::kTypeFieldNumber;
const int Evidence::kValidatorFieldNumber;
const int Evidence::kHeightFieldNumber;
const int Evidence::kTimeFieldNumber;
const int Evidence::kTotalVotingPowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Evidence::Evidence()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:suil.tmsp.types.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_validator()) {
    validator_ = new ::suil::tmsp::types::Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  if (from.has_time()) {
    time_ = new ::suil::tmsp::types::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_voting_power_) -
    reinterpret_cast<char*>(&height_)) + sizeof(total_voting_power_));
  // @@protoc_insertion_point(copy_constructor:suil.tmsp.types.Evidence)
}

void Evidence::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Evidence_types_2eproto.base);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_voting_power_) -
      reinterpret_cast<char*>(&validator_)) + sizeof(total_voting_power_));
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:suil.tmsp.types.Evidence)
  SharedDtor();
}

void Evidence::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete validator_;
  if (this != internal_default_instance()) delete time_;
}

void Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Evidence& Evidence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Evidence_types_2eproto.base);
  return *internal_default_instance();
}


void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:suil.tmsp.types.Evidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_voting_power_) -
      reinterpret_cast<char*>(&height_)) + sizeof(total_voting_power_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Evidence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Evidence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .suil.tmsp.types.Validator validator = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Validator::_InternalParse;
        object = msg->mutable_validator();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 height = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_height(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::suil::tmsp::types::Timestamp::_InternalParse;
        object = msg->mutable_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 total_voting_power = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_total_voting_power(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Evidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:suil.tmsp.types.Evidence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "suil.tmsp.types.Evidence.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Validator validator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_validator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .suil.tmsp.types.Timestamp time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_voting_power = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_voting_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:suil.tmsp.types.Evidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:suil.tmsp.types.Evidence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Evidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:suil.tmsp.types.Evidence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "suil.tmsp.types.Evidence.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // .suil.tmsp.types.Validator validator = 2;
  if (this->has_validator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::validator(this), output);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->height(), output);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::time(this), output);
  }

  // int64 total_voting_power = 5;
  if (this->total_voting_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_voting_power(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:suil.tmsp.types.Evidence)
}

size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:suil.tmsp.types.Evidence)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .suil.tmsp.types.Validator validator = 2;
  if (this->has_validator()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  // .suil.tmsp.types.Timestamp time = 4;
  if (this->has_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // int64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->height());
  }

  // int64 total_voting_power = 5;
  if (this->total_voting_power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_voting_power());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Evidence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Evidence*>(&from));
}

void Evidence::MergeFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:suil.tmsp.types.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_validator()) {
    mutable_validator()->::suil::tmsp::types::Validator::MergeFrom(from.validator());
  }
  if (from.has_time()) {
    mutable_time()->::suil::tmsp::types::Timestamp::MergeFrom(from.time());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.total_voting_power() != 0) {
    set_total_voting_power(from.total_voting_power());
  }
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:suil.tmsp.types.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::Swap(Evidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(validator_, other->validator_);
  swap(time_, other->time_);
  swap(height_, other->height_);
  swap(total_voting_power_, other->total_voting_power_);
}

::std::string Evidence::GetTypeName() const {
  return "suil.tmsp.types.Evidence";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tmsp
}  // namespace suil
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ProofOp* Arena::CreateMaybeMessage< ::suil::tmsp::types::ProofOp >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ProofOp >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Proof* Arena::CreateMaybeMessage< ::suil::tmsp::types::Proof >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Proof >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::KVPair* Arena::CreateMaybeMessage< ::suil::tmsp::types::KVPair >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::KVPair >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::KI64Pair* Arena::CreateMaybeMessage< ::suil::tmsp::types::KI64Pair >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::KI64Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Timestamp* Arena::CreateMaybeMessage< ::suil::tmsp::types::Timestamp >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Request* Arena::CreateMaybeMessage< ::suil::tmsp::types::Request >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestEcho* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestEcho >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestFlush* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestFlush >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestInfo* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestSetOption* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestSetOption >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestSetOption >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestInitChain* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestInitChain >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestQuery* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestQuery >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestBeginBlock* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestBeginBlock >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestCheckTx* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestCheckTx >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestDeliverTx* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestDeliverTx >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestEndBlock* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestEndBlock >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::RequestCommit* Arena::CreateMaybeMessage< ::suil::tmsp::types::RequestCommit >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::RequestCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Response* Arena::CreateMaybeMessage< ::suil::tmsp::types::Response >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseException* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseException >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseException >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseEcho* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseEcho >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseEcho >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseFlush* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseFlush >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseFlush >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseInfo* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseSetOption* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseSetOption >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseSetOption >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseInitChain* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseInitChain >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseInitChain >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseQuery* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseQuery >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseBeginBlock* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseBeginBlock >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseBeginBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseCheckTx* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseCheckTx >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseCheckTx >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseDeliverTx* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseDeliverTx >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseDeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseEndBlock* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseEndBlock >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseEndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ResponseCommit* Arena::CreateMaybeMessage< ::suil::tmsp::types::ResponseCommit >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ResponseCommit >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ConsensusParams* Arena::CreateMaybeMessage< ::suil::tmsp::types::ConsensusParams >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::BlockSizeParams* Arena::CreateMaybeMessage< ::suil::tmsp::types::BlockSizeParams >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::BlockSizeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::EvidenceParams* Arena::CreateMaybeMessage< ::suil::tmsp::types::EvidenceParams >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::EvidenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ValidatorParams* Arena::CreateMaybeMessage< ::suil::tmsp::types::ValidatorParams >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ValidatorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::LastCommitInfo* Arena::CreateMaybeMessage< ::suil::tmsp::types::LastCommitInfo >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::LastCommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Header* Arena::CreateMaybeMessage< ::suil::tmsp::types::Header >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Version* Arena::CreateMaybeMessage< ::suil::tmsp::types::Version >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::BlockID* Arena::CreateMaybeMessage< ::suil::tmsp::types::BlockID >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::BlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::PartSetHeader* Arena::CreateMaybeMessage< ::suil::tmsp::types::PartSetHeader >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::PartSetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Validator* Arena::CreateMaybeMessage< ::suil::tmsp::types::Validator >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::ValidatorUpdate* Arena::CreateMaybeMessage< ::suil::tmsp::types::ValidatorUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::ValidatorUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::VoteInfo* Arena::CreateMaybeMessage< ::suil::tmsp::types::VoteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::VoteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::PubKey* Arena::CreateMaybeMessage< ::suil::tmsp::types::PubKey >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::PubKey >(arena);
}
template<> PROTOBUF_NOINLINE ::suil::tmsp::types::Evidence* Arena::CreateMaybeMessage< ::suil::tmsp::types::Evidence >(Arena* arena) {
  return Arena::CreateInternal< ::suil::tmsp::types::Evidence >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
